## total energy production
global(r_kcal_allcrops_sum_MM_perpix*1e6, fun = "sum", na.rm = T)/1e12 # 9495 trillion kcal
# Practicalities ----------------------------------- change to native pipe!
# !!!! numeroi scriptit lopuksi: missä järjestyksessä tulee ajaa
# !!! kehittele funktio, joka laskee 99% quantilen kullekin layerille ja trimmaa rasteria sen mukaan
# if (!dir.exists("Data")){ dir.create("Data") }
# if (!dir.exists("Figures")){ dir.create("Figures") } # modify and add to packages etc
# if (!dir.exists("Data/Input")){ dir.create("Data/Input") }
# if (!dir.exists("Data/Intermediate_input")){ dir.create("Data/Intermediate_input") }
# if (!dir.exists("Data/Output")){ dir.create("Data/Output") }
# Packages etc
# packages <- c("tidyverse",  "scico",
#               "sf", "terra", "here", "tictoc", "rmapshaper",  "countrycode",
#               "readxl", "broom", "tidyr")
#
# not_installed <- packages[!(packages %in% installed.packages()[,"Package"])]
library(tidyverse);  library(terra); library(sf)
library(scico); library(tmap);
library(here); library(tictoc); library(rmapshaper)
library(countrycode);library(readxl)
library(broom); library(tidyr)
# options, mainly for terra package
#terraOptions(tempdir= here("Temp_R"))
#terraOptions()
# timestep
timestep_2000_2015 <- 2000:2015 # !! begins in 2000
timestep_2000_2020 <- 2000:2020
timestep_2001_2015 <- 2001:2015 # is this even needed?
timestep_2001_2020 <- 2001:2020
timestep_climnorm <- 1991:2020
template_rast_5arcmin <- rast(nrows=2160, ncols=4320,
crs = "EPSG:4326")
e <- ext(-180, 180, -90, 90)
# Polygons
adm_10m <- here("Data", "Input", "ne_10m_admin_0_countries.shp") |>
read_sf()
Finland_geom <- adm_10m %>% filter(ADMIN == "Finland") %>% dplyr::select(ADMIN) |>
as("Spatial") |>   vect()
#Finland_ext <- ext(21, 31.5, 60, 70)
# -------------------------------------------------------- create country raster
# adm10_simple <- ms_simplify(adm_10m) #  203 row -- was 258
#
# #change adm10 iso codes to fao codes
# adm10_simple_faoadded <- adm10_simple %>%
#   dplyr::select(ADMIN, NAME, SOVEREIGNT, ISO_A3_EH, REGION_UN) %>%
#   as.data.frame() %>%
#   st_drop_geometry()
#
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   mutate(fao_from_iso3eh = countrycode(.$ISO_A3_EH, origin = "iso3c", destination = "fao"),
#          # find fao code also using name of sovereignts (combine these cols later to get match)
#          fao_from_SOVEREIGNT = countrycode(.$SOVEREIGNT, origin = "country.name",  destination = "fao"))
# ## warns that some are missing. However, either fao_from_iso3eh or fao_from_SOVEREIGNT includes most
#
# ## give Somaliland FAO code of Somalia
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   rows_update(., tibble(
#     SOVEREIGNT = "Somaliland",
#     fao_from_SOVEREIGNT = (filter(adm10_simple_faoadded, SOVEREIGNT == "Somalia") %>%
#                              pull(fao_from_SOVEREIGNT))))
#
# ## combine cols fao_from_iso3eh and fao_from_SOVEREIGNT.
# ## If any of the columns has value, this value will be the FAO_ID
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   mutate(FAO_ID = coalesce(fao_from_iso3eh, fao_from_SOVEREIGNT)) %>%
#   filter(SOVEREIGNT != "Antarctica")  ## drop antarctica
#
#
#
# adm10_simple_faoadded <- st_as_sf(adm10_simple_faoadded)
# # save for intermediate use
# st_write(adm10_simple_faoadded,
#          here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg"))
## to be bit faster save and read this file
# st_write(adm10_simple_faoadded, here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg"))
adm10_simple_faoadded <-
here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg") %>%
st_read()
## convert to raster
cntry_raster <- rasterize(vect(adm10_simple_faoadded),
template_rast_5arcmin, field = "FAO_ID")
#plot(cntry_raster, main = "Antarctica neede or not?")
## convert to rob
adm10_simple_faoadded_rob <-  adm10_simple_faoadded %>%
st_transform(., crs = "ESRI:54030")
# -------------------------------------------------------- not sure which data to use for countries
# --------------------------------------------------------
# admin borders originally created by Vili
# possible to derive from adm10m using e.g package "countryname"
# adm0_vili <-  here("Data", "Input", "adm0_polygons_025dgr.shp") %>%
#   read_sf() %>%
#   dplyr::select(ADMIN, ISO_3166_1, FAO_ID, NAME)
#
# adm0_vili_vecto <- adm0_vili %>% as("Spatial") %>% vect() # 168 unique
#
# #
#
#
# # combine adm10m data with fao id
# df_adm10m <- as.data.frame(adm_10m) %>%
#   dplyr::select(ADMIN, NAME, geometry)
# df_adm0_vili <- as.data.frame(adm0_vili)
#
# # join. We want to preserve countries of df_adm0_vili but add more precise geometries
# df_adm_10m_fao_id <-
#   left_join(df_adm0_vili,
#             df_adm10m, by = c("ADMIN", "NAME" )) %>% # 176 obs.
#   # Combined by name as did not find country codes
#   dplyr::select(ADMIN, NAME, ISO_3166_1, FAO_ID,  geometry.y) %>%
#   rename(geometry = geometry.y)
# head(df_adm_10m_fao_id)
#
# # df_adm0_vili %>% filter(ADMIN == "Finland") %>% head()
# # df_adm_10m_fao_id %>% filter(ADMIN == "Finland") %>% head()
#
#
#
# # adm_10m_fao_id_simple <- st_as_sf(df_adm_10m_fao_id) %>%
# #   ms_simplify()
# adm_10m_fao_id_simple_rob <- adm_10m_fao_id_simple %>%
#   st_transform(., crs = "ESRI:54030")
# # ---------------------------------------------------------------
#
#
# cntry_raster <- rasterize(vect(adm_10m_fao_id_simple),
#                           template_rast_5arcmin, field = "FAO_ID")
# --------------------------------------------------------
# --------------------------------------------------------
## regions
reg <- here("Data", "Input", "reg_mollw.gpkg") |>  st_read()
reg_rob <- st_transform(reg, crs = "ESRI:54030")
reg_wgs <- st_transform(reg, crs = "EPSG:4326")
reg_wgs_vect <- vect(as(reg_wgs, "Spatial"))
#
# reg_rob <- reg_rob |>
#   mutate(subregion = c("Australia and Oceania", "Central America",
#                        "East Asia", "Eastern Europe and Central Asia",
#                        "Ice", "South Asia", "South America", "Middle East",
#                        "Sub-Saharan Africa", "North Africa", "North America",
#                        "Southeast Asia", "Western Europe")) #|>   filter(subregion != "Ice") # maybe not needed ## it is needed for figs
#
#
#
#
# # simplify only for plotting
# reg_rob_simple <- ms_simplify(reg_rob) # Remove ice or not?
# st_write(reg_rob_simple, here("Data", "Intermediate_input", "reg_rob_simple.gpkg"))
reg_rob_simple <- here("Data", "Intermediate_input", "reg_rob_simple.gpkg") %>% st_read()
## function for cropping and maskin
crop_and_mask <- function(r_data, df_cropmask_polygon){
r_data |>
crop(df_cropmask_polygon) |>
mask(df_cropmask_polygon)
}
## function for plotting
create_index_map <- function(r_index, index_label,index_main_title,
colorpal, breakvals,
breaknames = NULL,
color_midpoint = NULL, tocrs = NA){
if (!is.na(tocrs)){
r_index <- project(r_index, tocrs, mask = TRUE)
}
index_map <- tm_shape(r_index) +
tm_raster(palette = colorpal, # try style = "fixed",
breaks = breakvals,
labels = breaknames,
title = index_label,
midpoint = color_midpoint,
legend.is.portrait = FALSE) + # added 9.8.22
#  legend.reverse = TRUE) + # deleted 9.8.22
tm_layout(main.title = index_main_title,
main.title.position = "center",
main.title.size = 1,
legend.bg.color = TRUE,
legend.outside = TRUE,
legend.title.size = 1,
legend.text.size = 1,
legend.outside.size = 0.2,
legend.outside.position = "bottom", # added 9,8
frame = FALSE)+
tm_shape(adm10_simple_faoadded_rob) + # was reg_rob_simple
tm_borders(col = NA,  lwd = 0.5)  # lwd was 0.33, col was "grey30",
return (index_map)
}
## plotting without contry borders (reg instead)
create_index_map_no_cntry <- function(r_index, index_label,index_main_title,
colorpal, breakvals,
breaknames = NULL,
color_midpoint = NULL, tocrs = NA){
if (!is.na(tocrs)){
r_index <- project(r_index, tocrs, mask = TRUE)
}
index_map <- tm_shape(r_index) +
tm_raster(palette = colorpal, # try style = "fixed",
breaks = breakvals,
labels = breaknames,
title = index_label,
midpoint = color_midpoint,
legend.is.portrait = FALSE) + # added 9.8.22
#  legend.reverse = TRUE) + # deleted 9.8.22
tm_layout(main.title = index_main_title,
main.title.position = "center",
main.title.size = 1,
legend.bg.color = TRUE,
legend.outside = TRUE,
legend.title.size = 1,
legend.text.size = 1,
legend.outside.size = 0.2,
legend.outside.position = "bottom", # added 9,8
frame = FALSE)+
tm_shape(reg_rob_simple  ) +
tm_borders(col = NA,  lwd = 0.5)  # lwd was 0.33, col was "grey30",
return (index_map)
}
# Function to remove outliers. Only needed when calculating global sums
f_raster_without_outliers <- function(myraster_layer) {
# Calculate quantiles for both 0.01 and 0.99
quantiles <- quantile(values(myraster_layer), probs = c(0.01, 0.99), na.rm = T)
# Define classification rules with "from-to-becomes" structure
rcl_outliers <- matrix(c(-Inf, quantiles[1], quantiles[1],
quantiles[2], Inf, quantiles[2]), ncol = 3, byrow = T)
# Classify raster values according to rules, with include.lowest and right set
myraster_new <- classify(myraster_layer, rcl_outliers, include.lowest = TRUE, right = NA)
return(myraster_new)
}
f_global_sum_without_outliers <- function(myraster_layer) {
out_values <- quantile(values(myraster_layer), probs = 0.99, na.rm = T)
myraster_new <- myraster_layer
myraster_new[myraster_new > out_values] <- NA
totsum <- global(myraster_new, fun = "sum", na.rm = T)
return(totsum)
}
land_mask <- ifel(cntry_raster > 0, 1, NA)
plot(land_mask) # plot to get rid of error
# Get intermediate data
# ---------------------------------------------------------------- crops
# Crop production areas
r_physical_areas_crops_sum_ha_perpix <-
here("Data", "Intermediate_input","r_physical_areas_crops_sum_ha_perpix.tif") %>%
rast()
# Crop total yields
r_global_production_crops_sum_kg_ha <-
here("Data", "Intermediate_input","r_global_production_crops_sum_kg_ha.tif") %>%
rast()
# Crop protein and energy
r_prot_allcrops_sum_mt_perpix <- here("Data", "Intermediate_input","protein_production_27crops_sum_mt_perpix.tif") %>%
rast()
r_prot_allcrops_sum_kg_ha <- here("Data", "Intermediate_input","protein_production_27crops_sum_kg_ha.tif") %>%
rast()
r_kcal_allcrops_sum_MM_perpix <-
here("Data", "Intermediate_input", "energy_production_27crops_sum_perpix.tif") %>%
rast()
# ---------------------------------------------------------------- livestock
# Livestock protein and energy
r_protein_from_065xAGB_kg_perpix <- here("Data", "Intermediate_input","r_protein_from_065xAGB_kg_perpix.tif") %>% rast()
r_protein_from_065xAGB_kg_ha <- here("Data", "Intermediate_input","r_protein_from_065xAGB_kg_ha.tif") %>% rast()
r_kcal_from_065xAGB_MM_ha <- here("Data", "Intermediate_input","r_kcal_from_065xAGB_MM_ha.tif") %>%  rast()
r_kcal_from_065xAGB_MM_perpix <-
here("Data", "Intermediate_input","r_kcal_from_065xAGB_MM_perpix.tif") %>%
rast()
# maybe not needed
# r_protein_fraction_Meat_from_FAOtables <-
#   here("Data", "Intermediate_input","r_protein_fraction_Meat_from_FAOtables.tif") %>%
#   rast()
# ------------------------------------------------------------------- fractions
# Fraction of crops in a cell
r_fraction_cl <-
here("Data", "Intermediate_input","r_fraction_cl_with_27_spamcrops.tif") %>%
rast()
r_fraction_cl[r_fraction_cl >1] <- 1
r_fraction_cl_0toNA <- classify(r_fraction_cl, cbind(0,NA))
r_fraction_cl_NAto0 <- classify(r_fraction_cl, cbind(NA,0))
# r_fraction_gl <-
#   here("Data", "Input", "from_harddrive",
#        "fraction_of_cell_that_is_hyde_grazingland2010_0toNA.tif") %>%   #### changed
#   rast() # includes corn belt as this is HYDE based gl
r_fraction_gl <-
here("Data", "Input", "from_harddrive", # NO Corn Belt
"r_fraction_hyde_grazing_lands_masked_to_MODIS_IGBP_areas_0toNA.tif") %>%   #### changed  was HYDE area only
rast()
r_fraction_gl[r_fraction_gl >1] <- 1
r_fraction_gl_0toNA <- classify(r_fraction_gl, cbind(0,NA))
r_fraction_gl_NAto0 <- classify(r_fraction_gl, cbind(NA,0))
r_fraction_gl_cl_total <- r_fraction_gl_NAto0 + r_fraction_cl_NAto0 # cannot be over 1!
r_fraction_gl_cl_total[r_fraction_gl_cl_total>1] <- 1
r_fraction_gl_cl_total_NAto0 <- classify(r_fraction_gl_cl_total, cbind(NA,0)) # totally same as above!
r_fraction_gl_cl_total_0toNA <- classify(r_fraction_gl_cl_total, cbind(0,NA))
# --------------------------------------------------------- Suitability indices
SI_5arcmin <-
here("Data", "Input", "Zabel22_SI",
"SI_5arcmin_overall_suitability_subset1to17_hist1980_2009_current_irr_areas_applied.tif") %>%
rast()
# ----------------------------------------------------------- 7 comparisons
r_protein_combined_kg_ha <- here("Data", "Intermediate_input", "r_protein_combined_kg_ha.tif") %>%
rast()
r_protein_combined_kg_ha_croplandmask <- here("Data", "Intermediate_input", "r_protein_combined_kg_ha_croplandmask.tif") %>%
rast()
r_protein_combined_kg_ha_SIbelow10mask_croplandmask <- here("Data", "Intermediate_input", "r_protein_combined_kg_ha_SIbelow10mask_croplandmask.tif") %>%
rast()
r_share_of_total_protein_livestock <- here("Data", "Intermediate_input", "r_share_of_total_protein_livestock.tif") %>%
rast()
r_share_of_total_protein_livestock_croplandmask <- here("Data", "Intermediate_input", "r_share_of_total_protein_livestock_croplandmask.tif") %>%
rast()
r_share_of_total_protein_livestock_SIbelow10mask_croplandmask <- here("Data", "Intermediate_input", "r_share_of_total_protein_livestock_SIbelow10mask_croplandmask.tif") %>%
rast()
SI_5arcmin_below10_croplandmask <- here("Data", "Intermediate_input", "SI_5arcmin_below10_croplandmask.tif") %>%
rast()
# Total combined protein
global(r_protein_combined_kg_perpix, "sum", na.rm = T)/1e9 # 285
# Chunk 1
# calculate combined protein that we can get from a cell (combined = protein_grazing_livestock + protein_crops)
r_protein_combined_kg_perpix <-
1000 * classify(r_prot_allcrops_sum_mt_perpix, cbind(NA, 0)) +
classify(r_protein_from_065xAGB_kg_perpix$current_herd_str, cbind(NA, 0))
names(r_protein_combined_kg_perpix) <- "combined_protein"
# Grazing livestock's share of total protein production on agricultural land
# share of the total protein that originates from livestock
## first convert NA to 0
r_protein_from_AGB_current_str_kg_perpix_NAto0 <-
classify(r_protein_from_065xAGB_kg_perpix$current_herd_str, cbind(NA, 0))
r_share_of_total_protein_livestock <- 100* (r_protein_from_AGB_current_str_kg_perpix_NAto0 / r_protein_combined_kg_perpix)
plot(r_share_of_total_protein_livestock, main = "Contribution of livestock to total protein production")
# --------------------------------------------------- same masked to cl
## cropland mask
## share of livestock masked to croplands to show that on cropland areas livestock produce only a little
r_share_of_total_protein_livestock_croplandmask <-
mask(r_share_of_total_protein_livestock,
r_fraction_cl_0toNA)
plot(r_share_of_total_protein_livestock_croplandmask,
main = "Contribution of livestock to total protein production on croplands")
# ----------------------- further masked to cl where SI extremely low (below 10)
## SI below 10 mask AND croplandmask
SI_5arcmin_below10 <- SI_5arcmin
SI_5arcmin_below10[SI_5arcmin_below10 >= 10] <- NA
plot(SI_5arcmin_below10, main = "SI below 10")
SI_5arcmin_below10_croplandmask <- mask(SI_5arcmin_below10, r_fraction_cl_0toNA)
plot(SI_5arcmin_below10_croplandmask, main = "SI below 10 on croplands")
r_share_of_total_protein_livestock_SIbelow10mask_croplandmask <-
mask(r_share_of_total_protein_livestock, SI_5arcmin_below10_croplandmask)
plot(r_share_of_total_protein_livestock_SIbelow10mask_croplandmask,
main = "Contribution of livestock to total protein production on croplands where SI < 10")
# Chunk 2
r_energy_combined_MM_perpix <-
classify(r_kcal_from_065xAGB_MM_perpix$current_herd_str_MMkcal_perpix, cbind(NA, 0)) +
classify(r_kcal_allcrops_sum_MM_perpix, cbind(NA, 0))
names(r_energy_combined_MM_perpix) <- "combined_energy"
# Grazing livestock's share of total kcal production on agricultural land OR  share of the total energy that originates from livestock
r_share_of_total_energy_livestock <-
100* (classify(r_kcal_from_065xAGB_MM_perpix$current_herd_str_MMkcal_perpix, cbind(NA,0)) /
r_energy_combined_MM_perpix)
plot(r_share_of_total_energy_livestock, main = "Contribution of livestock to total energy production")
# --------------------------------------------------- same masked to cl
r_share_of_total_energy_livestock_croplandmask <-
mask(r_share_of_total_energy_livestock,
r_fraction_cl_0toNA)
# ----------------------- further masked to cl where SI extremely low (below 10)
## SI below 10 mask AND croplandmask
r_share_of_total_energy_livestock_SIbelow10mask_croplandmask <-
mask(r_share_of_total_energy_livestock,
SI_5arcmin_below10_croplandmask)
# Chunk 3
# total combined protein per ha
r_protein_combined_kg_ha <-
r_protein_combined_kg_perpix /
(cellSize(r_protein_combined_kg_perpix, unit ="ha")/
r_fraction_gl_cl_total_0toNA)
# total combined protein per ha - croplandmask
r_protein_combined_kg_ha_croplandmask <-
mask(r_protein_combined_kg_ha,
r_fraction_cl_0toNA)
# total combined protein per ha - outside croplandmask -- same as only livestock here
r_protein_combined_kg_ha_outside_croplands <-
mask(r_protein_from_065xAGB_kg_ha$current_herd_str, # could be also r_protein_combined_kg_ha but this is more correct
r_fraction_cl_0toNA, inverse = T)
# further masked to cl where SI extremely low (below 10)
r_protein_combined_kg_ha_SIbelow10mask_croplandmask <-
mask(r_protein_combined_kg_ha,
SI_5arcmin_below10_croplandmask)
plot(r_protein_combined_kg_ha_SIbelow10mask_croplandmask)
# -------------------------------------------- save rasters we need
# writeRaster(r_protein_combined_kg_ha,
#             filename = here("Data", "Intermediate_input", "r_protein_combined_kg_ha.tif"),
#             overwrite = TRUE)
# writeRaster(r_protein_combined_kg_ha_croplandmask,
#             filename = here("Data", "Intermediate_input", "r_protein_combined_kg_ha_croplandmask.tif"),
#             overwrite = TRUE)
# writeRaster(r_protein_combined_kg_ha_SIbelow10mask_croplandmask,
#             filename = here("Data", "Intermediate_input", "r_protein_combined_kg_ha_SIbelow10mask_croplandmask.tif"),
#             overwrite = TRUE)
#
#
#
# writeRaster(r_share_of_total_protein_livestock,
#             filename = here("Data", "Intermediate_input", "r_share_of_total_protein_livestock.tif"),
#             overwrite = TRUE)
# writeRaster(r_share_of_total_protein_livestock_croplandmask,
#             filename = here("Data", "Intermediate_input", "r_share_of_total_protein_livestock_croplandmask.tif"),
#             overwrite = TRUE)
# writeRaster(r_share_of_total_protein_livestock_SIbelow10mask_croplandmask,
#             filename = here("Data", "Intermediate_input", "r_share_of_total_protein_livestock_SIbelow10mask_croplandmask.tif"),
#             overwrite = TRUE)
#
#
# writeRaster(SI_5arcmin_below10_croplandmask,
#             filename = here("Data", "Intermediate_input", "SI_5arcmin_below10_croplandmask.tif"),
#             overwrite = TRUE)
# Chunk 4
# Total combined protein
global(r_protein_combined_kg_perpix, "sum", na.rm = T)/1e9 # 285
# Total combined proteinon croplands
r_protein_combined_kg_perpix_croplandmask <-
mask(r_protein_combined_kg_perpix,
r_fraction_cl_0toNA)
global(r_protein_combined_kg_perpix_croplandmask, "sum", na.rm = T)/1e9 # 281
# Total combined protein on croplands where SI < 10
r_protein_combined_kg_perpix_SIbelow10mask_croplandmask <-
mask(r_protein_combined_kg_perpix,
SI_5arcmin_below10_croplandmask)
global(r_protein_combined_kg_perpix_SIbelow10mask_croplandmask, "sum", na.rm = T)/1e9 # 6
# Total combined protein outside croplands -- this should be same as amount of protein current herd produces outside cl
r_protein_combined_kg_perpix_outside_croplands <-
mask(r_protein_combined_kg_perpix,
r_fraction_cl_0toNA, inverse = T)
global(r_protein_combined_kg_perpix_outside_croplands, "sum", na.rm = T)/1e9 # 4
mask(r_protein_from_065xAGB_kg_perpix$current_herd_str,
r_fraction_cl_0toNA, inverse = T) %>%
global(., "sum", na.rm = T)/1e9 # 4
# ---------------------------------------------------- energy
# Chunk 5
# # ---------------------------------------------------- calculate per pixel
# r_protein_combined_kg_perpix_when_dairy <-
#     app(c(1000 * r_prot_allcrops_sum_mt_perpix, r_protein_from_065xAGB_kg_perpix$dairy),
#            fun = sum, na.rm = T) # must use app as gl and cl not overlapping. Alternatively:
# # r_protein_combined_kg_perpix_when_dairy2 <-
# #   1000 * classify(r_prot_allcrops_sum_mt_perpix, cbind(NA, 0)) +
# #   classify( r_protein_from_AGB_kg_perpix$dairy, cbind(NA, 0))
#
#
# r_protein_combined_kg_perpix_when_beef <-
#     app(c(1000 * r_prot_allcrops_sum_mt_perpix, r_protein_from_065xAGB_kg_perpix$beef),
#            fun = sum, na.rm = T)
#
# r_protein_combined_kg_perpix_when_sheepgoats <-
#     app(c(1000 * r_prot_allcrops_sum_mt_perpix, r_protein_from_065xAGB_kg_perpix$sheep_and_goats),
#            fun = sum, na.rm = T)
#
#
# r_protein_combined_kg_perpix <-
#   c(r_protein_combined_kg_perpix_when_dairy,
#     r_protein_combined_kg_perpix_when_beef,
#     r_protein_combined_kg_perpix_when_sheepgoats)
# names(r_protein_combined_kg_perpix) <- c("when Dairy cattle", "when Beef cattle", "when Sheep and goats")
#
#
#
# summary(r_protein_from_065xAGB_kg_perpix)
# summary(1000 * r_prot_allcrops_sum_mt_perpix)
# summary(r_protein_combined_kg_perpix)
# Chunk 6
#
# # share of the total protein that originates from livestock
#   ## first convert NA to 0
# r_protein_from_AGB_kg_perpix_NAto0 <- classify(r_protein_from_065xAGB_kg_perpix, cbind(NA, 0))
# r_share_of_total_protein_livestock <- 100* (r_protein_from_AGB_kg_perpix_NAto0 / r_protein_combined_kg_perpix)
# plot(r_share_of_total_protein_livestock, main = "Contribution of livestock to total protein production")
#
#
# # share of the total protein that originates from crops
#   ## first convert NA to 0
# # r_prot_allcrops_sum_kg_perpix_NAto0 <- 1000 * classify(r_prot_allcrops_sum_mt_perpix, cbind(NA, 0))
# # r_share_of_total_protein_crops <- 100* (r_prot_allcrops_sum_kg_perpix_NAto0 / r_protein_combined_kg_perpix)
# # plot(r_share_of_total_protein_crops)
# #
# #  ## test
# # mean(r_share_of_total_protein_livestock + r_share_of_total_protein_crops) # should be 100
#
#
#
#
#
# # --------------------------------------------------- same masked to cl
#   ## cropland mask
#   ## share of livestock masked to croplands to show that on cropland areas livestock produce only a little
# r_share_of_total_protein_livestock_croplandmask <-
#   mask(r_share_of_total_protein_livestock,
#        r_fraction_cl_0toNA)
#
# plot(r_share_of_total_protein_livestock_croplandmask, main = "Contribution of livestock to total protein production on croplands")
#
#
#
#
# # ----------------------- further masked to cl where SI extremely low (below 10)
#
#   ## SI below 10 mask AND croplandmask
# SI_5arcmin_below10 <- SI_5arcmin
# SI_5arcmin_below10[SI_5arcmin_below10 >= 10] <- NA
# plot(SI_5arcmin_below10, main = "SI below 10")
#
# SI_5arcmin_below10_croplandmask <- mask(SI_5arcmin_below10, r_fraction_cl_0toNA)
# plot(SI_5arcmin_below10_croplandmask, main = "SI below 10 on croplands")
#
# r_share_of_total_protein_livestock_SIbelow10mask_croplandmask <-
#   mask(r_share_of_total_protein_livestock, SI_5arcmin_below10_croplandmask)
#
# plot(r_share_of_total_protein_livestock_SIbelow10mask_croplandmask,
#      main = "Contribution of livestock to total protein production on croplands where SI < 10")
#
# Total combined protein
global(r_protein_combined_kg_perpix, "sum", na.rm = T)/1e9 # 285
274/284.8782
274/285
