library(tidyverse)
library(terra)
library(tidyverse);library(terra);library(broom); library(tidyr)
template_rast_5arcmin <- rast(nrows=2160, ncols=4320,
crs = "EPSG:4326")
# SI
SI_5arcmin <-
"SI_5arcmin_overall_suitability_hist1980_2009_current_irr_areas_applied.tif") %>%
# SI
SI_5arcmin <-
"SI_5arcmin_overall_suitability_hist1980_2009_current_irr_areas_applied.tif" %>%
rast()
# Crop protein production yields
r_prot_allcrops_sum_kg_ha <-
"protein_production_27crops_sum_kg_ha.tif" %>%
rast()
quantile(values(r_prot_allcrops_sum_kg_ha), probs = 0.95, na.rm = T) # 826.4333
r_protein_and_SI <- c(r_prot_allcrops_sum_kg_ha, SI_5arcmin)
plot(r_protein_and_SI)
## to be bit faster save and read this file
# st_write(adm10_simple_faoadded, here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg"))
adm10_simple_faoadded <-
"adm10_simple_faoadded.gpkg" %>%
st_read()
library(sf)
all_countries <-
"adm10_simple_faoadded.gpkg" %>%
st_read()
# tehdään rasteri kullekin eri maalle (tarvitaan df arvot reg varten) --- tässä listana maapolygonit
country_sf_list <- all_countries %>%
mutate(country_sf_list = map(ADMIN, ~filter(adm10_simple_faoadded, ADMIN == .x))) %>%
pull(country_sf_list)
adm10_simple_faoadded <-  "adm10_simple_faoadded.gpkg" %>%
st_read()
all_countries <- adm10_simple_faoadded
# tehdään rasteri kullekin eri maalle (tarvitaan df arvot reg varten) --- tässä listana maapolygonit
country_sf_list <- all_countries %>%
mutate(country_sf_list = map(ADMIN, ~filter(adm10_simple_faoadded, ADMIN == .x))) %>%
pull(country_sf_list)
country_sf_list[[53]] %>% plot() # FI
# tämän listan perustella voidaan maskata rasteri r_protein_and_SI kullekin maalle
country_raster_list <- map(country_sf_list, ~crop_and_mask(r_protein_and_SI, .x))
crop_and_mask <- function(r_data, df_cropmask_polygon){
r_data |>
crop(df_cropmask_polygon) |>
mask(df_cropmask_polygon)
}
country_raster_list <- map(country_sf_list, ~crop_and_mask(r_protein_and_SI, .x))
country_raster_list[[53]] %>% plot() # FI
# Muunnetaan country_raster_list dataframeksi
# löytyy koordinaatit sekä crop_protein_kg_ha  ja overall_suitability data joka maalle
country_df_list <- map(country_raster_list, ~as.data.frame(.x, xy = T) %>% as_tibble())
country_df_list[[53]] # suomen koordinaatit, crop_protein_kg_ha  ja overall_suitability
# etsitään datasta outlierit joka maalle (taas lista)
outlier_level_list <- map_dbl(country_df_list, ~quantile(.x$crop_protein_kg_ha, probs = 0.95, na.rm = T)) # 95 or 99?
outlier_level_list[[53]] # 1243.164 Suomelle
# Filtteröidään data niin, että outlierit poistettu. Poistetaan myös x ja y
country_df_filtered_list <- map2(country_df_list, outlier_level_list, ~.x %>%
filter(crop_protein_kg_ha <= .y) %>% # not sure if I should add !is.na(overall_suitability)
dplyr::select(-c(x, y)))
country_df_filtered_list[[53]] # tässä data regressiota varten
# tehdään regressio tästä filtteröidystä datasta -- käytetään safe funktiota
# Wrapper function for linear regression
fit_lm_possibly <- function(data) {
model_output <- lm(crop_protein_kg_ha ~ overall_suitability, data = data)
model_coef <- model_output %>%
broom::tidy() %>%
dplyr::select(term, estimate, p.value)
model_stats <- model_output %>%
broom::glance()
# Combine model_coef and model_stats into a single row data frame
result <- model_coef %>%
mutate(r.squared = model_stats$r.squared,
adj.r.squared = model_stats$adj.r.squared,
AIC = model_stats$AIC,
BIC = model_stats$BIC,
nobs = model_stats$nobs,
sigma = model_stats$sigma,
statistic = model_stats$statistic,
p.value = p.value) %>%
pivot_wider(names_from = term, values_from = c(estimate, p.value)) %>%
rename(estimate_intercept = "estimate_(Intercept)",
estimate_suitability = "estimate_overall_suitability",
pvalue_suitability = "p.value_overall_suitability") %>%
dplyr::select(estimate_intercept, estimate_suitability, pvalue_suitability,
r.squared, adj.r.squared, AIC, BIC, nobs, statistic)
return(result)
}
# Safe version of the linear regression function
fit_lm_safe <- purrr::possibly(fit_lm_possibly, otherwise = NULL)
model_list <- map(country_df_filtered_list, fit_lm_safe)
model_list[[53]] # suomen tulos, mutta kahdella rivillä, olisi parempi jos kaikki olisivat yhdessä rivissä
# yhdistetään nested country_df_filtered_list polygonien kanssa
all_countries <- all_countries %>%
mutate(country_df_filtered_list = country_df_filtered_list,
model_list = model_list)
# clean
all_countries_cleaned <- all_countries %>%
dplyr::select(ADMIN, ISO_A3_EH, REGION_UN, geom, model_list)
all_countries_cleaned <- all_countries_cleaned %>%
mutate(model_list = map(model_list, ~ as_tibble(.x))) %>%
unnest(cols = model_list, keep_empty = T)
#View(all_countries_cleaned)
# 1) Etsi maat missä malli ei ole merkittävä. Näille maille vain tarvitaan etäisyys (etäisyys pval>0.05 maasta merkitykselliseen maahan)
model_significant <- all_countries_cleaned %>% filter(pvalue_suitability < 0.05) # 124 maata
model_nonsignificant <- all_countries_cleaned %>% filter(pvalue_suitability >= 0.05 | is.na(pvalue_suitability)) # 78 maata jos non sig otetaan mukaan
# Noille 78 maalle pitää löytää etäisyydet muihin maihin, joissa on merkityksellinen malli
# Sitä varten tarvitaan etäisyyksiä. Ennen etäisyyksiä pitää muodostaa keskipisteet joka maalle
p_adm0_centroids_st <- all_countries_cleaned %>%
dplyr::select(ADMIN, geom) %>%
st_centroid()
# Näistä etäisyyksistä halutaan valita ensin merkitsevien ja ei merkitsevien mallien rivit --- etäisyydet tarvitaan ainoastaan ei merkitsevistä merkitseviin
# Filter centroids for countries with significant and non-significant models
significant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_significant$ADMIN) # 124
nonsignificant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_nonsignificant$ADMIN) # 78  --------> etäisyydet tarvitaan vain näille (esim Uruguay listalla)
# laske etäisyys
# Calculate distances between non-significant and significant model centroids
distTemp <- st_distance(nonsignificant_centroids, significant_centroids) %>%
as_tibble() # 63 riviä koska 63 nonsignificant_centroids ja 121 saraketta koska 121 merkitsevää maata
# etäisyydet
# rivi = ei merkittävien maiden keskipiste   JA
# sarake = merkitsevien maiden keskipiste  VÄLILLÄ
# Eli (1,1) maan Dhekelia Sovereign Base Area keskipisteestä maan Indonesia keskipisteeseen
# Eli (1,2) maan Dhekelia Sovereign Base Area keskipisteestä maan Malaysia keskipisteeseen
# muokataan sig ja non sig maanimet matriisiin
# add sig maat sarakkeisiin
# dist_tibble <- distTemp %>%
#   as_tibble()
# colnames(dist_tibble) <- significant_centroids$ADMIN
#
# # lisää non sig maat riveille
# dist_tibble <- dist_tibble %>%
#   mutate(nonsig_cntr = nonsignificant_centroids$ADMIN) %>%
#   dplyr::select(nonsig_cntr, everything())
# Etsi lähimmän merkityksellisen mallin indeksi kullekin ei-merkitykselliselle mallille
closest_significant_indices <- apply(distTemp, 1, which.min) # joka riville pienin etäisyys, eli valitaan merkityksellisistä sarakkeista se (col), josta on lyhim matka kyseiseen merkityksettömään maahan (row)
# Liitä lähimmät merkitykselliset mallit ei-merkityksellisiin malleihin
model_nonsignificant_with_closest <- model_nonsignificant %>%
mutate(closest_significant_model = model_significant$ADMIN[closest_significant_indices], # max = 120
closest_significant_index = closest_significant_indices) # why this is needed?
# Yhdistä taulukko "merkitsevät" ei-merkitsevien kanssa, joista kuitenkin tiedetään lähin merkitsevä maa
all_countries_with_replacement <- model_significant %>%
bind_rows(model_nonsignificant_with_closest)
# TARKISTA ETTÄ TOIMII OIKEIN -- näyttää toimivan!
# lisätään intercept
updated_regression_results <- all_countries_with_replacement %>%
mutate(estimate_suitability_filled =
ifelse(pvalue_suitability >= 0.05 | is.na(pvalue_suitability),
model_significant$estimate_suitability[closest_significant_index],
estimate_suitability),
estimate_intercept_filled =
ifelse(pvalue_suitability >= 0.05 | is.na(pvalue_suitability),
model_significant$estimate_intercept[closest_significant_index],
estimate_intercept))
# Original model where non-sig are not filled or replaced
all_countries_cleaned$adj.r.squared %>% summary() # 2 to 6 % mean/median values
filter(all_countries_cleaned, pvalue_suitability < 0.05) %>%
dplyr::select(adj.r.squared) %>% summary() # 4-9% mean/med values
country_sf_list
model_nonsignificant
r_suitability_filled <-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_suitability_filled")
r_intercept_filled <-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_intercept_filled")
r_predicted_protein_yield_kg_ha<- r_intercept_filled + r_suitability_filled * SI_5arcmin
pal_protein_lajolla <- scico(n = 6, palette = "lajolla", end = 0.85)
library(scico)
pal_protein_lajolla <- scico(n = 6, palette = "lajolla", end = 0.85)
(plt_crop_protein_predicted <-
create_index_map(r_index = r_predicted_protein_yield_kg_ha,
tocrs = "ESRI:54030",
index_main_title = "Test estimated crop protein yields ",
index_label = "[kg/ha]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500")))
## function for plotting
create_index_map <- function(r_index, index_label,index_main_title,
colorpal, breakvals,
breaknames = NULL,
color_midpoint = NULL, tocrs = NA){
if (!is.na(tocrs)){
r_index <- project(r_index, tocrs, mask = TRUE)
}
index_map <- tm_shape(r_index) +
tm_raster(palette = colorpal, # try style = "fixed",
breaks = breakvals,
labels = breaknames,
title = index_label,
midpoint = color_midpoint,
legend.is.portrait = FALSE) + # added 9.8.22
#  legend.reverse = TRUE) + # deleted 9.8.22
tm_layout(main.title = index_main_title,
main.title.position = "center",
main.title.size = 1,
legend.bg.color = TRUE,
legend.outside = TRUE,
legend.title.size = 1,
legend.text.size = 1,
legend.outside.size = 0.2,
legend.outside.position = "bottom", # added 9,8
frame = FALSE)+
tm_shape(adm10_simple_faoadded_rob) + # was reg_rob_simple
tm_borders(col = NA,  lwd = 0.5)  # lwd was 0.33, col was "grey30",
return (index_map)
}
pal_protein_lajolla <- scico(n = 6, palette = "lajolla", end = 0.85)
(plt_crop_protein_predicted <-
create_index_map(r_index = r_predicted_protein_yield_kg_ha,
tocrs = "ESRI:54030",
index_main_title = "Test estimated crop protein yields ",
index_label = "[kg/ha]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500")))
library(tmap)
(plt_crop_protein_predicted <-
create_index_map(r_index = r_predicted_protein_yield_kg_ha,
tocrs = "ESRI:54030",
index_main_title = "Test estimated crop protein yields ",
index_label = "[kg/ha]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500")))
updated_regression_results
View(updated_regression_results)
