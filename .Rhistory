# Practicalities
# !!!! numeroi scriptit lopuksi: missä järjestyksessä tulee ajaa
if (!dir.exists("Data")){ dir.create("Data") }
if (!dir.exists("Figures")){ dir.create("Figures") } # modify and add to packages etc
if (!dir.exists("Data/Input")){ dir.create("Data/Input") }
if (!dir.exists("Data/Intermediate_input")){ dir.create("Data/Intermediate_input") }
if (!dir.exists("Data/Output")){ dir.create("Data/Output") }
# Packages etc
# install.packages('terra', repos='https://rspatial.r-universe.dev')
# packages <- c("tidyverse", "raster","gdalUtils", "scico",
#               "sf", "terra", "data.table","here", "tictoc",
#               "easypackages")
# not_installed <- packages[!(packages %in% installed.packages()[,"Package"])]
# if(length(not_installed)){install.packages(not_installed)}
library(tidyverse); library(raster); library(terra); library(sf)
library(scico); library(tmap); library(data.table)
library(here); library(tictoc); library(rmapshaper)
library(PolyTrend); library(countrycode)
# options, mainly for terra package
#terraOptions(tempdir= here("Temp_R"))
#terraOptions()
# timestep
timestep_2000_2015 <- 2000:2015 # !! begins in 2000
timestep_2000_2020 <- 2000:2020
timestep_2001_2015 <- 2001:2015 # is this even needed?
timestep_2001_2020 <- 2001:2020
timestep_climnorm <- 1991:2020
template_rast_5arcmin <- rast(nrows=2160, ncols=4320,
crs = "EPSG:4326")
e <- ext(-180, 180, -90, 90)
# Polygons
adm_10m <- here("Data", "Input", "ne_10m_admin_0_countries.shp") |>
read_sf()
Finland_geom <- adm_10m %>% filter(ADMIN == "Finland") %>% dplyr::select(ADMIN) |>
as("Spatial") |>   vect()
Finland_ext <- ext(21, 31.5, 60, 70)
# -------------------------------------------------------- create country raster
#adm10_simple <- ms_simplify(adm_10m) #  203 row -- was 258
# change adm10 iso codes to fao codes
# adm10_simple_faoadded <- adm10_simple %>%
#   dplyr::select(ADMIN, NAME, SOVEREIGNT, ISO_A3_EH) %>%
#   as.data.frame() %>%
#   st_drop_geometry()
#
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   mutate(fao_from_iso3eh = countrycode(.$ISO_A3_EH, origin = "iso3c", destination = "fao"),
#          # find fao code also using name of sovereignts (combine these cols later to get match)
#          fao_from_SOVEREIGNT = countrycode(.$SOVEREIGNT, origin = "country.name",  destination = "fao"))
# ## warns that some are missing. However, either fao_from_iso3eh or fao_from_SOVEREIGNT includes most
#
# ## give Somaliland FAO code of Somalia
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   rows_update(., tibble(
#     SOVEREIGNT = "Somaliland",
#     fao_from_SOVEREIGNT = (filter(adm10_simple_faoadded, SOVEREIGNT == "Somalia") %>%
#                              pull(fao_from_SOVEREIGNT))))
#
# ## combine cols fao_from_iso3eh and fao_from_SOVEREIGNT.
# ## If any of the columns has value, this value will be the FAO_ID
# adm10_simple_faoadded <- adm10_simple_faoadded %>%
#   mutate(FAO_ID = coalesce(fao_from_iso3eh, fao_from_SOVEREIGNT)) %>%
#   filter(SOVEREIGNT != "Antarctica")  ## drop antarctica
#
#
#
#
# ## convert to raster
# adm10_simple_faoadded <- st_as_sf(adm10_simple_faoadded)
## to be bit faster save and read this file
# st_write(adm10_simple_faoadded, here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg"))
adm10_simple_faoadded <-
here("Data", "Intermediate_input", "adm10_simple_faoadded.gpkg") %>%
st_read()
cntry_raster <- rasterize(vect(adm10_simple_faoadded),
template_rast_5arcmin, field = "FAO_ID")
#plot(cntry_raster, main = "Antarctica neede or not?")
## convert to rob
adm10_simple_faoadded_rob <-  adm10_simple_faoadded %>%
st_transform(., crs = "ESRI:54030")
# -------------------------------------------------------- not sure which data to use for countries
# --------------------------------------------------------
# admin borders originally created by Vili
# possible to derive from adm10m using e.g package "countryname"
# adm0_vili <-  here("Data", "Input", "adm0_polygons_025dgr.shp") %>%
#   read_sf() %>%
#   dplyr::select(ADMIN, ISO_3166_1, FAO_ID, NAME)
#
# adm0_vili_vecto <- adm0_vili %>% as("Spatial") %>% vect() # 168 unique
#
# #
#
#
# # combine adm10m data with fao id
# df_adm10m <- as.data.frame(adm_10m) %>%
#   dplyr::select(ADMIN, NAME, geometry)
# df_adm0_vili <- as.data.frame(adm0_vili)
#
# # join. We want to preserve countries of df_adm0_vili but add more precise geometries
# df_adm_10m_fao_id <-
#   left_join(df_adm0_vili,
#             df_adm10m, by = c("ADMIN", "NAME" )) %>% # 176 obs.
#   # Combined by name as did not find country codes
#   dplyr::select(ADMIN, NAME, ISO_3166_1, FAO_ID,  geometry.y) %>%
#   rename(geometry = geometry.y)
# head(df_adm_10m_fao_id)
#
# # df_adm0_vili %>% filter(ADMIN == "Finland") %>% head()
# # df_adm_10m_fao_id %>% filter(ADMIN == "Finland") %>% head()
#
#
#
# # adm_10m_fao_id_simple <- st_as_sf(df_adm_10m_fao_id) %>%
# #   ms_simplify()
# adm_10m_fao_id_simple_rob <- adm_10m_fao_id_simple %>%
#   st_transform(., crs = "ESRI:54030")
# # ---------------------------------------------------------------
#
#
# cntry_raster <- rasterize(vect(adm_10m_fao_id_simple),
#                           template_rast_5arcmin, field = "FAO_ID")
# --------------------------------------------------------
# --------------------------------------------------------
## regions
reg <- here("Data", "Input", "reg_mollw.gpkg") |>  st_read()
reg_rob <- st_transform(reg, crs = "ESRI:54030")
reg_wgs <- st_transform(reg, crs = "EPSG:4326")
reg_wgs_vect <- vect(as(reg_wgs, "Spatial"))
reg_rob <- reg_rob |>
mutate(subregion = c("Australia and Oceania", "Central America",
"East Asia", "Eastern Europe and Central Asia",
"Ice", "South Asia", "South America", "Middle East",
"Sub-Saharan Africa", "North Africa", "North America",
"Southeast Asia", "Western Europe")) #|>   filter(subregion != "Ice") # maybe not needed ## it is needed for figs
# simplify only for plotting
reg_rob_simple <- ms_simplify(reg_rob) # Remove ice or not?
## function for cropping and maskin
crop_and_mask <- function(r_data, df_cropmask_polygon){
r_data |>
crop(df_cropmask_polygon) |>
mask(df_cropmask_polygon)
}
## function for plotting
create_index_map <- function(r_index, index_label,index_main_title,
colorpal, breakvals,
breaknames = NULL,
color_midpoint = NULL, tocrs = NA){
if (!is.na(tocrs)){
r_index <- project(r_index, tocrs, mask = TRUE)
}
index_map <- tm_shape(r_index) +
tm_raster(palette = colorpal, # try style = "fixed",
breaks = breakvals,
labels = breaknames,
title = index_label,
midpoint = color_midpoint,
legend.is.portrait = FALSE) + # added 9.8.22
#  legend.reverse = TRUE) + # deleted 9.8.22
tm_layout(main.title = index_main_title,
main.title.position = "center",
main.title.size = 1,
legend.bg.color = TRUE,
legend.outside = TRUE,
legend.title.size = 1,
legend.text.size = 1,
legend.outside.size = 0.2,
legend.outside.position = "bottom", # added 9,8
frame = FALSE)+
tm_shape(adm10_simple_faoadded_rob) + # was reg_rob_simple
tm_borders(col = NA,  lwd = 0.5)  # lwd was 0.33, col was "grey30",
return (index_map)
}
## plotting without contry borders (reg instead)
create_index_map_no_cntry <- function(r_index, index_label,index_main_title,
colorpal, breakvals,
breaknames = NULL,
color_midpoint = NULL, tocrs = NA){
if (!is.na(tocrs)){
r_index <- project(r_index, tocrs, mask = TRUE)
}
index_map <- tm_shape(r_index) +
tm_raster(palette = colorpal, # try style = "fixed",
breaks = breakvals,
labels = breaknames,
title = index_label,
midpoint = color_midpoint,
legend.is.portrait = FALSE) + # added 9.8.22
#  legend.reverse = TRUE) + # deleted 9.8.22
tm_layout(main.title = index_main_title,
main.title.position = "center",
main.title.size = 1,
legend.bg.color = TRUE,
legend.outside = TRUE,
legend.title.size = 1,
legend.text.size = 1,
legend.outside.size = 0.2,
legend.outside.position = "bottom", # added 9,8
frame = FALSE)+
tm_shape(reg_rob_simple  ) +
tm_borders(col = NA,  lwd = 0.5)  # lwd was 0.33, col was "grey30",
return (index_map)
}
plot(cntry_raster)
library(readxl, quietly = T)
nutritients <- read_excel(
here("Data", "Input", "faostat", "Nutritive_Factors.xlsx"))
## modify cols
nutritients <- nutritients %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients %>%  filter(str_detect(COMMODITY, "RICE")) %>% dplyr::select(COMMODITY)
## create a list for filtering
mylist_nutritients <- c(
"WHEAT", "MILLED/HUSKED RICE", "BARLEY", "MAIZE", "MILLET",
"SORGHUM", "CEREALS NES", "CASSAVA", "POTATOES", "SWEET POTATO",
"ROOTS AND TUBERS NES", "BEANS DRY", "PEAS DRY", "PULSES NES",
"SOYBEANS", "GROUNDNUTS", "COCONUTS", "VEGETABLES FRESH NES", "BANANAS",
"PLANTAINS", "YAMS" ) # 21
nutritients2 <- nutritients %>%
filter(COMMODITY %in% mylist_nutritients) # 21
#
# Extract list we will use when filtering
# my_itemlist_fao_toupper <- str_extract(my_itemlist_fao, "^\\w+") %>%
#   toupper()
# nutritients3 <-nutritients %>%
#   filter(str_detect(COMMODITY, paste(my_itemlist_fao_toupper, collapse = "|"))) # 87
plot(cntry_raster)
cntry_raster
nutritients
nutritients <- read_excel(
here("Data", "Input", "faostat", "Nutritive_Factors.xlsx"))
mylist_nutritients <- c(
"WHEAT", "MILLED/HUSKED RICE", "BARLEY", "MAIZE", "MILLET",
"SORGHUM", "CEREALS NES", "CASSAVA", "POTATOES", "SWEET POTATO",
"ROOTS AND TUBERS NES", "BEANS DRY", "PEAS DRY", "PULSES NES",
"SOYBEANS", "GROUNDNUTS", "COCONUTS", "VEGETABLES FRESH NES", "BANANAS",
"PLANTAINS", "YAMS" ) # 21
## modify cols
nutritients <- nutritients %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients <- nutritients %>%
filter(COMMODITY %in% mylist_nutritients) # 21
## Add spamnames to nutritients ---> automatize, order is the same
nutritients <- nutritients %>%
mutate(spamname = case_when(
COMMODITY == "WHEAT" ~ "whea",
COMMODITY == "MILLED/HUSKED RICE"  ~ "rice",
COMMODITY == "BARLEY" ~ "barl",
COMMODITY == "MAIZE" ~ "maiz",
COMMODITY == "MILLET"  ~ "pmil", # not all of the millets in this
COMMODITY == "SORGHUM"  ~ "sorg",
COMMODITY == "CEREALS NES"   ~ "ocer",
COMMODITY == "CASSAVA"   ~ "cass",
COMMODITY == "POTATOES" ~ "pota",
COMMODITY == "SWEET POTATO"  ~ "swpo",
COMMODITY == "ROOTS AND TUBERS NES"  ~ "orts",
COMMODITY == "BEANS DRY"  ~ "bean",
COMMODITY == "PEAS DRY"  ~ "chic", # not all peas in this
COMMODITY == "PULSES NES"  ~ "opul", # not all pulses in this
COMMODITY == "SOYBEANS"  ~ "soyb",
COMMODITY == "GROUNDNUTS"   ~ "grou",
COMMODITY == "COCONUTS"  ~ "cnut",
COMMODITY == "VEGETABLES FRESH NES"  ~ "vege",
COMMODITY == "BANANAS"  ~ "bana",
COMMODITY == "PLANTAINS"  ~ "plnt",
COMMODITY == "YAMS"  ~ "yams"
))
View(nutritients)
nutritients$spamname
nutritients$spamname %>% toupper()
sort(mylist_nutritients)
nutritients <- nutritients %>%
mutate(kok = mylist_spam)
mylist_spam <- c(
"WHEA", "RICE", "BARL", "MAIZ", "PMIL",
"SORG", "OCER", "CASS", "POTA", "SWPO",
"ORTS", "BEAN", "CHIC", "OPUL", "SOYB",
"GROU", "CNUT", "VEGE", "BANA", "PLNT",
"YAMS") # 21
nutritients <- nutritients %>%
mutate(kok = mylist_spam)
nutritients <- read_excel(
here("Data", "Input", "faostat", "Nutritive_Factors.xlsx"))
mylist_nutritients <- c(
"WHEAT", "MILLED/HUSKED RICE", "BARLEY", "MAIZE", "MILLET",
"SORGHUM", "CEREALS NES", "CASSAVA", "POTATOES", "SWEET POTATO",
"ROOTS AND TUBERS NES", "BEANS DRY", "PEAS DRY", "PULSES NES", "SOYBEANS",
"GROUNDNUTS", "COCONUTS", "VEGETABLES FRESH NES", "BANANAS","PLANTAINS",
"YAMS" ) # 21
sort(mylist_nutritients)
mylist_spam <- c(
"WHEA", "RICE", "BARL", "MAIZ", "PMIL",
"SORG", "OCER", "CASS", "POTA", "SWPO",
"ORTS", "BEAN", "CHIC", "OPUL", "SOYB",
"GROU", "CNUT", "VEGE", "BANA", "PLNT",
"YAMS") # 21
## modify cols
nutritients <- nutritients %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients <- nutritients %>%
filter(COMMODITY %in% mylist_nutritients) # 21
topuuer(mylist_spam)
toupper(mylist_spam)
## modify cols
nutritients <- nutritients %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients_raw <- read_excel(
here("Data", "Input", "faostat", "Nutritive_Factors.xlsx"))
mylist_nutritients <- c(
"WHEAT", "MILLED/HUSKED RICE", "BARLEY", "MAIZE", "MILLET",
"SORGHUM", "CEREALS NES", "CASSAVA", "POTATOES", "SWEET POTATO",
"ROOTS AND TUBERS NES", "BEANS DRY", "PEAS DRY", "PULSES NES", "SOYBEANS",
"GROUNDNUTS", "COCONUTS", "VEGETABLES FRESH NES", "BANANAS","PLANTAINS",
"YAMS" ) # 21
sort(mylist_nutritients)
mylist_spam <- c(
"WHEA", "RICE", "BARL", "MAIZ", "PMIL",
"SORG", "OCER", "CASS", "POTA", "SWPO",
"ORTS", "BEAN", "CHIC", "OPUL", "SOYB",
"GROU", "CNUT", "VEGE", "BANA", "PLNT",
"YAMS") # 21
## modify cols
nutritients <- nutritients_raw %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients <- nutritients %>%
filter(COMMODITY %in% mylist_nutritients) # 21
## Add spamnames to nutritients ---> automatize, order is the same
nutritients <- nutritients %>%
mutate(spamname = case_when(
COMMODITY == "WHEAT" ~ "whea",
COMMODITY == "MILLED/HUSKED RICE"  ~ "rice",
COMMODITY == "BARLEY" ~ "barl",
COMMODITY == "MAIZE" ~ "maiz",
COMMODITY == "MILLET"  ~ "pmil", # not all of the millets in this
COMMODITY == "SORGHUM"  ~ "sorg",
COMMODITY == "CEREALS NES"   ~ "ocer",
COMMODITY == "CASSAVA"   ~ "cass",
COMMODITY == "POTATOES" ~ "pota",
COMMODITY == "SWEET POTATO"  ~ "swpo",
COMMODITY == "ROOTS AND TUBERS NES"  ~ "orts",
COMMODITY == "BEANS DRY"  ~ "bean",
COMMODITY == "PEAS DRY"  ~ "chic", # not all peas in this
COMMODITY == "PULSES NES"  ~ "opul", # not all pulses in this
COMMODITY == "SOYBEANS"  ~ "soyb",
COMMODITY == "GROUNDNUTS"   ~ "grou",
COMMODITY == "COCONUTS"  ~ "cnut",
COMMODITY == "VEGETABLES FRESH NES"  ~ "vege",
COMMODITY == "BANANAS"  ~ "bana",
COMMODITY == "PLANTAINS"  ~ "plnt",
COMMODITY == "YAMS"  ~ "yams"
))
## modify cols
nutritients_crop <- nutritients_raw %>%
mutate(kcalPerKg = calories_per100g * 10,
protein_fraction = protein_mgper1g/1000) %>%
dplyr::select(-fat_mgper1g)
nutritients_crop <- nutritients %>%
filter(COMMODITY %in% mylist_nutritients) # 21
## Add spamnames to nutritients ---> automatize, order is the same
nutritients_crop <- nutritients %>%
mutate(spamname = case_when(
COMMODITY == "WHEAT" ~ "whea",
COMMODITY == "MILLED/HUSKED RICE"  ~ "rice",
COMMODITY == "BARLEY" ~ "barl",
COMMODITY == "MAIZE" ~ "maiz",
COMMODITY == "MILLET"  ~ "pmil", # not all of the millets in this
COMMODITY == "SORGHUM"  ~ "sorg",
COMMODITY == "CEREALS NES"   ~ "ocer",
COMMODITY == "CASSAVA"   ~ "cass",
COMMODITY == "POTATOES" ~ "pota",
COMMODITY == "SWEET POTATO"  ~ "swpo",
COMMODITY == "ROOTS AND TUBERS NES"  ~ "orts",
COMMODITY == "BEANS DRY"  ~ "bean",
COMMODITY == "PEAS DRY"  ~ "chic", # not all peas in this
COMMODITY == "PULSES NES"  ~ "opul", # not all pulses in this
COMMODITY == "SOYBEANS"  ~ "soyb",
COMMODITY == "GROUNDNUTS"   ~ "grou",
COMMODITY == "COCONUTS"  ~ "cnut",
COMMODITY == "VEGETABLES FRESH NES"  ~ "vege",
COMMODITY == "BANANAS"  ~ "bana",
COMMODITY == "PLANTAINS"  ~ "plnt",
COMMODITY == "YAMS"  ~ "yams"
))
fbs_animals <- foodBalanceSheets_semiraw %>%
filter(Item %in% c("Meat", "Bovine Meat", "Mutton & Goat Meat"),
Element %in% my_elementlist_fao)
foodBalanceSheets_semiraw <-
here("Data", "Input", "faostat", "foodBalanceSheets_E_All_Data_NOFLAG.csv") %>%
read.csv() %>%
dplyr::select(-Element.Code,-Unit ,-c(Y2011:Y2019)) # no need to update the data if we use only 2010?
my_itemlist_fao <- c(  # in mapspam webpage order
"Wheat and products", "Rice and products","Maize and products",
"Barley and products", "Millet and products", "Sorghum and products",
"Cereals, Other", "Potatoes and products", "Sweet potatoes",
"Yams", "Cassava and products", "Roots, Other",
"Beans", "Peas", "Pulses, Other and products",
"Soyabeans","Groundnuts", "Coconuts - Incl Copra",
"Bananas", "Plantains",  "Vegetables" # 21 crops -- no fruits!
)
my_elementlist_fao <- c(
"Production","Food supply quantity (kg/capita/yr)",
"Food supply (kcal/capita/day)", "Protein supply quantity (g/capita/day)"
)
# ---------------------------------------- FAOSTAT animal protein to kcal
fbs_animals <- foodBalanceSheets_semiraw %>%
filter(Item %in% c("Meat", "Bovine Meat", "Mutton & Goat Meat"),
Element %in% my_elementlist_fao)
## pivot wider
fbs_animals_wide <- fbs_animals %>%
pivot_wider(names_from = Element, values_from = Y2010) %>%
rename(prod_1000mt = "Production", # eg numbers in FIN equals Lukestat
supply.KgCapYr = "Food supply quantity (kg/capita/yr)",
supply.KcalCapD = "Food supply (kcal/capita/day)",
prot.gCapD = "Protein supply quantity (g/capita/day)") %>%
## how many kcal one kg of meat protein includes? Varies between species
## create variable protein to kcal ------------------- >> why needed? as it is faster than converting similarly as done for crops with kcalPerKg?
mutate(one_kg_prot_to_kcal =  (supply.KcalCapD / prot.gCapD) * 1000,
protein_fraction = (prot.gCapD*365/1000) / supply.KgCapYr) %>% # protein fraction for meat products
dplyr::select(-Item.Code)
## combine with geometries
fbs_animals_wide <-
left_join(fbs_animals_wide,
(adm10_simple_faoadded %>% dplyr::select(FAO_ID, NAME)),
by = c("Area.Code" = "FAO_ID"))
View(fbs_animals_wide)
foodBalanceSheets_semiraw <-
here("Data", "Input", "faostat", "foodBalanceSheets_E_All_Data_NOFLAG.csv") %>%
read.csv() %>%
dplyr::select(-Element.Code,-Unit ,-c(Y2011:Y2019)) # no need to update the data if we use only 2010?
# ---------------------------------------------------------- crops
my_itemlist_fao <- c(  # in mapspam webpage order
"Wheat and products", "Rice and products","Maize and products",
"Barley and products", "Millet and products", "Sorghum and products",
"Cereals, Other", "Potatoes and products", "Sweet potatoes",
"Yams", "Cassava and products", "Roots, Other",
"Beans", "Peas", "Pulses, Other and products",
"Soyabeans","Groundnuts", "Coconuts - Incl Copra",
"Bananas", "Plantains",  "Vegetables" # 21 crops -- no fruits!
)
my_elementlist_fao <- c(
"Production","Food supply quantity (kg/capita/yr)",
"Food supply (kcal/capita/day)", "Protein supply quantity (g/capita/day)"
)
fbs_crops <- foodBalanceSheets_semiraw  %>%
filter(Item %in% my_itemlist_fao,
Element %in% my_elementlist_fao)
## to wide format. Select only relevant variables
fbs_crops_wide <- fbs_crops %>%
pivot_wider(names_from = Element, values_from = Y2010) %>%
rename(prod_1000mt = "Production",
supply.KgCapYr = "Food supply quantity (kg/capita/yr)",
supply.KcalCapD = "Food supply (kcal/capita/day)",
prot.gCapD = "Protein supply quantity (g/capita/day)")
## add column where item names corresponds to mapsmap names
fbs_crops_wide <- fbs_crops_wide %>%
mutate(spamname = case_when(
Item == "Wheat and products" ~ "whea",
Item == "Rice and products"  ~ "rice",
Item == "Barley and products" ~ "barl",
Item == "Maize and products" ~ "maiz",
Item == "Millet and products"  ~ "pmil", # not all of the millets in this
Item == "Sorghum and products"  ~ "sorg",
Item == "Cereals, Other"   ~ "ocer",
Item == "Cassava and products"   ~ "cass",
Item == "Potatoes and products" ~ "pota",
Item == "Sweet potatoes"  ~ "swpo",
Item == "Roots, Other"  ~ "orts",
Item == "Beans"  ~ "bean",
Item == "Peas"  ~ "chic", # not all peas in this
Item == "Pulses, Other and products"  ~ "opul", # not all pulses in this
Item == "Soyabeans"  ~ "soyb",
Item == "Groundnuts"   ~ "grou",
Item == "Coconuts - Incl Copra"  ~ "cnut",
Item == "Vegetables"  ~ "vege",
Item == "Bananas"  ~ "bana",
Item == "Plantains"  ~ "plnt",
Item == "Yams"  ~ "yams"
))
# ------------------------- Calculate fraction of protein and kcal in a product (conversion factor)
## protein and kcal
fbs_crops_wide <- fbs_crops_wide %>%
mutate(protein_fraction = (prot.gCapD*365/1000) / supply.KgCapYr,
kcalPerKg = (supply.KcalCapD*365)/ supply.KgCapYr)  %>%
mutate_all(function(x) ifelse(is.nan(x) | is.infinite(x), NA, x)) # remove cases where supply = 0 (cases that yield NA values)
fbs_crops_wide <-
left_join(fbs_crops_wide,
(adm10_simple_faoadded %>% dplyr::select(FAO_ID, NAME)),
by = c("Area.Code" = "FAO_ID"))
View(fbs_crops_wide)
names(fbs_crops_wide)
kok <- fbs_crops_wide %>%
dplyr::select(-Area.Code, -Item.Colde, -geom)
kok <- fbs_crops_wide %>%
dplyr::select(-Area.Code, -Item.Code, -geom)
head(kok)
View(kok)
