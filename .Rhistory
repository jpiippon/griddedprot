SI_grasses_5arcmin_mean  <- mean(SI_grasses_5arcmin, na.rm = T)
# test with current herd structures
r_protein_and_SI <- c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha,
SI_grasses_5arcmin_mean)
plot(SI_grasses_5arcmin)
plot(r_protein_and_SI)
names(r_protein_and_SI) <- c("animal_protein_kg_ha", "suitability")
# or if running regression using all grass species as independent variables
# r_protein_and_SI <- c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha,
#                       SI_grasses_5arcmin)
#
#
# names(r_protein_and_SI) <- c("animal_protein_kg_ha", "SI_plant19", "SI_plant20", "SI_plant21")
pairs(SI_grasses_5arcmin) # too high correlation amongst them?
df_protein_and_SI_test <-
as.data.frame( c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha, SI_grasses_5arcmin),
xy = T)
df_protein_and_SI_test <- df_protein_and_SI_test %>%
na.omit()
correlation_matrix <- cor(df_protein_and_SI_test %>%  dplyr::select(-x,-y))
correlation_matrix
# especially plant 20 and 21 have very strong correlation (Switchgrass and Reed canary grass)
library(corrplot)
corrplot(correlation_matrix, method = "circle")
head(df_protein_and_SI_test)
# check multicollinearity with VIF
vif_values <- vif(df_protein_and_SI_test)
vif_values
# check multicollinearity with VIF
library(car)
vif_values <- vif(df_protein_and_SI_test)
head(df_protein_and_SI_test)
vif_values <- vif(lm(animal_protein_kg_ha  ~ plantspecific_suitability_19 + plantspecific_suitability_20+ plantspecific_suitability_21),
data = df_protein_and_SI_test)
vif_values
head(df_protein_and_SI_test)
vif_values <- vif(lm(animal_protein_kg_ha  ~ plantspecific_suitability_19 + plantspecific_suitability_20+ plantspecific_suitability_21,
data = df_protein_and_SI_test))
vif_values
# AGB protein per ha
r_protein_from_065xAGB_kg_ha <-
here("Data", "Intermediate_input","r_protein_from_065xAGB_kg_ha.tif") %>%
rast()
names(r_protein_from_065xAGB_kg_ha) <-  c("dairy", "beef", "sheep_and_goats", "animal_protein_kg_ha")
SI_grasses_5arcmin <-
here("Data", "Input", "from_harddrive",
"SI_plants19_20_21_5arcmin.tif") %>%
rast()
SI_grasses_5arcmin_mean  <- mean(SI_grasses_5arcmin, na.rm = T)
# test with current herd structures
r_protein_and_SI <- c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha,
SI_grasses_5arcmin_mean)
plot(SI_grasses_5arcmin)
plot(r_protein_and_SI)
names(r_protein_and_SI) <- c("animal_protein_kg_ha", "suitability")
# or if running regression using all grass species as independent variables
# r_protein_and_SI <- c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha,
#                       SI_grasses_5arcmin)
#
#
# names(r_protein_and_SI) <- c("animal_protein_kg_ha", "SI_plant19", "SI_plant20", "SI_plant21")
# different grass species?
pairs(SI_grasses_5arcmin) # too high correlation amongst them?
df_protein_and_SI_test <-
as.data.frame( c(r_protein_from_065xAGB_kg_ha$animal_protein_kg_ha, SI_grasses_5arcmin),
xy = T)
df_protein_and_SI_test <- df_protein_and_SI_test %>%
na.omit()
correlation_matrix <- cor(df_protein_and_SI_test %>%  dplyr::select(-x,-y))
correlation_matrix
# especially plant 20 and 21 have very strong correlation (Switchgrass and Reed canary grass)
# check multicollinearity with VIF
library(car)
vif_values <-
vif(lm(animal_protein_kg_ha  ~ plantspecific_suitability_19 + plantspecific_suitability_20+ plantspecific_suitability_21,
data = df_protein_and_SI_test))
vif_values # the situation might be different in different countries.
library(corrplot)
corrplot(correlation_matrix, method = "circle")
# mean of grass suitabilities
pairs(r_protein_and_SI)
df_protein_and_SI_test_mean <-
r_protein_and_SI %>%
as.data.frame(., xy = T) %>%
na.omit()
correlation_matrix_mean <-
df_protein_and_SI_test_mean %>%
dplyr::select(-x,-y) %>%
cor()
correlation_matrix_mean # 0.42
# plot ---- maybe some kind of linearity?
ggplot(df_protein_and_SI_test_mean[sample(nrow(df_protein_and_SI_test_mean), 1e4), ],
aes(x = animal_protein_kg_ha , y = suitability)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot",
x = "Animal Protein (kg/ha)",
y = "Mean Suitability") +
theme_minimal()
all_countries <- adm10_simple_faoadded
# create list of countries
country_sf_list <- all_countries %>%
mutate(country_sf_list = map(ADMIN, ~filter(adm10_simple_faoadded, ADMIN == .x))) %>%
pull(country_sf_list)
country_sf_list[[53]] %>% plot() # FI
# find a relevant raster for each country by cropping and masking
country_raster_list <- map(country_sf_list, ~crop_and_mask(r_protein_and_SI, .x))
country_raster_list[[53]] %>% plot() # FI
# Convert to data frame
country_df_list <- map(country_raster_list, ~as.data.frame(.x, xy = T) %>% as_tibble())
country_df_list[[53]] # suomen koordinaatit, animal_protein_kg_ha_protein_kg_ha  ja SI for 3 grasses
#  find outliers for every country (list again)
outlier_level_list <- map_dbl(country_df_list, ~quantile(.x$animal_protein_kg_ha ,
probs = 0.95, na.rm = T)) # 95 or 99?
outlier_level_list[[53]]
# Filtter so that outliers are removed. Also remove x and y
country_df_filtered_list <-
map2(country_df_list,
outlier_level_list, ~.x %>% filter(animal_protein_kg_ha  <= .y) %>%
# maybe add SI >  0? If it improves the model..
dplyr::select(-c(x, y)))
country_df_filtered_list[[53]] #  data for regression
# do regression basd on this filtered data -- use  safe function of purrr to avoind troubles
# Wrapper function for linear regression
fit_lm_possibly <- function(data) {
model_output <-
lm(animal_protein_kg_ha  ~ suitability, data = data)
# in case one wants to try using regression using separate SI for different grasses
# model_output <-
#   lm(animal_protein_kg_ha ~ SI_plant19  + SI_plant20  + SI_plant21, data = data)
model_coef <- model_output %>%
broom::tidy() %>%
dplyr::select(term, estimate,  p.value) %>%
pivot_wider(., names_from = term, values_from = c(estimate, p.value))
model_stats <- model_output %>%
broom::glance()
# Combine model_coef and model_stats into a single row data frame
result <- model_coef %>%
mutate(r.squared = model_stats$r.squared, # these from model stats
adj.r.squared = model_stats$adj.r.squared,
AIC = model_stats$AIC,
BIC = model_stats$BIC,
nobs = model_stats$nobs,
sigma = model_stats$sigma,
statistic = model_stats$statistic,
p.value_Ftest = model_stats$p.value) %>%
rename(estimate_intercept = "estimate_(Intercept)")
return(result)
}
# Safe version of the linear regression function
fit_lm_safe <- purrr::possibly(fit_lm_possibly, otherwise = NULL)
model_list <- map(country_df_filtered_list, fit_lm_safe)
model_list[[53]] # FI results
# yhdistetään nested country_df_filtered_list polygonien kanssa
all_countries <- all_countries %>%
mutate(country_df_filtered_list = country_df_filtered_list,
model_list = model_list)
# clean
all_countries_cleaned <- all_countries %>%
dplyr::select(ADMIN, ISO_A3_EH, REGION_UN, geom, model_list)
all_countries_cleaned <- all_countries_cleaned %>%
mutate(model_list = map(model_list, ~ as_tibble(.x))) %>%
unnest(cols = model_list, keep_empty = T)
#View(all_countries_cleaned)
filter(all_countries_cleaned, p.value_Ftest < 0.05) %>%
dplyr::select(adj.r.squared) %>% summary() # mean 0.17 median 0.11 when mean of grass SIs used
model_significant <- all_countries_cleaned %>%
filter(p.value_Ftest < 0.05) # 145 countries
model_nonsignificant <- all_countries_cleaned %>%
filter(p.value_Ftest >= 0.05 | is.na(p.value_Ftest)) # 57
# Find distances for those 78 countries. First, find centroids (needed for distances)
p_adm0_centroids_st <- all_countries_cleaned %>%
dplyr::select(ADMIN, geom) %>%
st_centroid()
# Filter centroids for countries with significant and non-significant models
significant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_significant$ADMIN)
nonsignificant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_nonsignificant$ADMIN)
# Calculate distances between non-significant and significant model centroids
distTemp <- st_distance(nonsignificant_centroids, significant_centroids) %>%
as_tibble() # 77 rows because we have 77 nonsignificant_centroids. 125 cols as we have 125 significant countries
# Row = centroid of non-significant countries AND
# Column = centroid of significant countries BETWEEN
# So (1,1) from the centroid of country Dhekelia Sovereign Base Area to the centroid of country Indonesia
# So (1,2) from the centroid of country Dhekelia Sovereign Base Area to the centroid of country Malaysia
#Find the index of the closest significant model for each non-significant model
closest_significant_indices <- apply(distTemp, 1, which.min) # for each row, find the minimum distance, and select the significant column (col) with the shortest distance to the non-significant country (row)
#Attach the closest significant models to the non-significant models.
model_nonsignificant_with_closest <- model_nonsignificant %>%
mutate(closest_significant_model = model_significant$ADMIN[closest_significant_indices],
closest_significant_index = closest_significant_indices)
# Combine the table "significant" with non-significant ones, for which the closest significant country is known.
all_countries_with_replacement <- model_significant %>%
bind_rows(model_nonsignificant_with_closest)
# add intercept and filled suitability (needs to be modified if we do regression using plants 19-21 as predictor separately)
updated_regression_results <- all_countries_with_replacement %>%
mutate(estimate_suitability_filled =
ifelse(p.value_Ftest >= 0.05 | is.na(p.value_Ftest),
model_significant$estimate_suitability[closest_significant_index],
estimate_suitability),
estimate_intercept_filled =
ifelse(p.value_Ftest >= 0.05 | is.na(p.value_Ftest),
model_significant$estimate_intercept[closest_significant_index],
estimate_intercept))
r_intercept_avrg_grass_SI<-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_intercept_filled")
r_beta_coef_avrg_grass_SI <-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_suitability_filled")
r_predicted_animal_protein_yield_kg_ha <-
r_intercept_avrg_grass_SI + r_beta_coef_avrg_grass_SI * SI_grasses_5arcmin_mean # check that correct SI raster here
pal_protein_lajolla <- scico(n = 6, palette = "lajolla", end = 0.85)
(plt_crop_protein_predicted <-
create_index_map(r_index = r_predicted_animal_protein_yield_kg_ha,
#r_predicted_protein_yield_outside_cl_but_in_gl_areas_and_in_suitable_areas_kg_ha,
tocrs = "ESRI:54030",
index_main_title = "Test estimated ANIMAL protein yields ", # outside current croplands
index_label = "[kg/ha]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 1, 5, 10, 25, 50, Inf), # 1/10 of crops
breaknames = c("0-1","1-5", "5-10",
"10-25","25-50",  ">50")))
# Crop production raster
## convert NA to 0 to make upcoming calculations easier
r_physical_areas_crops_sum_ha_perpix_NAto0 <-
classify(r_physical_areas_crops_sum_ha_perpix, cbind(NA,0))
# Define a color palette for the plots
pal_share_nuuk <- scico(n = 7, palette = "nuuk",  direction = -1)
r_fraction_gl_cl_total_0toNA
r_SIbased_unrestricted_cropland_fraction <-
here("Data", "Intermediate_input", "Fraction_of_5arcmin_cell_where_SI_ge_threshold.tif") %>%
rast()
r_SIbased_unrestricted_cropland_ha_perpix <-
here("Data", "Intermediate_input", "unrestricted_amount_of_cropland_therecouldbe_whenSI_ge_threshold_ha_perpix.tif") %>%
rast()
# Chunk 3
r_SIbased_restricted_max_cropland_fraction <-
here("Data", "Intermediate_input", "Fraction_of_cropland_max_when_SI_ge_threshold.tif") %>%
rast()
r_SIbased_restricted_max_cropland_fraction_NAto0 <-
here("Data", "Intermediate_input", "Fraction_of_cropland_max_when_SI_ge_threshold_NAto0.tif") %>%
rast()
r_SIbased_restricted_max_cropland_ha_perpix <-
here("Data", "Intermediate_input","max_amount_of_cropland_therecouldbe_whenSIgeThreshold_ha_perpix.tif") %>%
rast()
r_SIbased_restricted_max_cropland_ha_perpix_NAto0 <-
here("Data", "Intermediate_input",
"max_amount_of_cropland_therecouldbe_whenSIgeThreshold_ha_perpix_NAto0.tif") %>%
rast()
create_dynamic_index_map <- function(myraster, layer_num, main_title,
diff_breakvals = c(-Inf, 10, 20, 60, 80, 100, Inf),
diff_breaknames = c("<10", "10-20", "20-60", "60-80", "80-100", ">100")) {
plt_dynamic_map <-
create_index_map(r_index = myraster[[layer_num]],
tocrs = "ESRI:54030",
index_main_title = sprintf(main_title, layer_num),
index_label = "%",
colorpal = pal_share_nuuk,
breakvals = diff_breakvals,
breaknames = diff_breaknames)
return(plt_dynamic_map)
}
# Create a vector of threshold values from 0 to 99
threshold_values <- 0:99
# to make thigs even easier
template_rast_5arcmin_cellsize <- cellSize(template_rast_5arcmin, unit = "ha")
plot(r_fraction_gl_0toNA)
plot(r_fraction_gl)
# Get intermediate data
# ---------------------------------------------------------------- crops
# Crop production areas
r_physical_areas_crops_sum_ha_perpix <-
here("Data", "Intermediate_input","r_physical_areas_crops_sum_ha_perpix.tif") %>%
rast()
# Crop total yields
r_global_production_crops_sum_kg_ha <-
here("Data", "Intermediate_input","r_global_production_crops_sum_kg_ha.tif") %>%
rast()
# Crop protein and energy
r_prot_allcrops_sum_mt_perpix <- here("Data", "Intermediate_input","protein_production_27crops_sum_mt_perpix.tif") %>%
rast()
r_prot_allcrops_sum_kg_ha <- here("Data", "Intermediate_input","protein_production_27crops_sum_kg_ha.tif") %>%
rast()
# ---------------------------------------------------------------- livestock
# Livestock protein and energy
r_protein_from_065xAGB_kg_perpix <- here("Data", "Intermediate_input","r_protein_from_065xAGB_kg_perpix.tif") %>% rast()
r_protein_from_065xAGB_kg_ha <- here("Data", "Intermediate_input","r_protein_from_065xAGB_kg_ha.tif") %>% rast()
r_kcal_from_065xAGB_MM_ha <- here("Data", "Intermediate_input","r_kcal_from_065xAGB_MM_ha.tif") %>%  rast()
r_kcal_from_065xAGB_MM_perpix <-
here("Data", "Intermediate_input","r_kcal_from_065xAGB_MM_perpix.tif") %>%
rast()
# ------------------------------------------------------------------- fractions
# Fraction of crops in a cell
r_fraction_cl <-
here("Data", "Intermediate_input","r_fraction_cl_with_27_spamcrops.tif") %>%
rast()
r_fraction_cl[r_fraction_cl >1] <- 1
r_fraction_cl_0toNA <- classify(r_fraction_cl, cbind(0,NA))
r_fraction_cl_NAto0 <- classify(r_fraction_cl, cbind(NA,0))
r_fraction_gl <-
here("Data", "Input", "from_harddrive",
"fraction_of_cell_that_is_hyde_grazingland2010_0toNA.tif") %>%   #### changed
rast() # includes corn belt as this is HYDE based gl
r_fraction_gl[r_fraction_gl >1] <- 1
r_fraction_gl_0toNA <- classify(r_fraction_gl, cbind(0,NA))
r_fraction_gl_NAto0 <- classify(r_fraction_gl, cbind(NA,0))
r_fraction_gl_cl_total <- r_fraction_gl_NAto0 + r_fraction_cl_NAto0 # cannot be over 1!
r_fraction_gl_cl_total[r_fraction_gl_cl_total>1] <- 1
r_fraction_gl_cl_total_NAto0 <- classify(r_fraction_gl_cl_total, cbind(NA,0)) # totally same as above!
r_fraction_gl_cl_total_0toNA <- classify(r_fraction_gl_cl_total, cbind(0,NA))
# --------------------------------------------------------- Suitability indices
SI_5arcmin <-
here("Data", "Input", "Zabel22_SI",
"SI_5arcmin_overall_suitability_subset1to17_hist1980_2009_current_irr_areas_applied.tif") %>%
rast()
r_physical_areas_crops_sum_ha_perpix_NAto0
r_SIbased_restricted_max_cropland_ha_perpix_NAto0
# Calculate how much more cropland there could be in cells (croplands already use a lot of very suitable  land). Thus cropland area could be expanded by this many hectares at most (per pixel)
r_potential_cropland_expansion_ha_perpix  <-
r_SIbased_restricted_max_cropland_ha_perpix_NAto0  - r_physical_areas_crops_sum_ha_perpix_NAto0
# land mask (not completely mandatory but all the oceans are 0 if we dont do this)
r_potential_cropland_expansion_ha_perpix <-
mask(r_potential_cropland_expansion_ha_perpix, r_fraction_gl_cl_total_0toNA )
# create reclassification matrix#
# rclmat_neg_to_zeros <- matrix(c(-Inf, 0, 0), ncol = 3, byrow = TRUE)  # mp MA ---- convert negative to 0 instead -- or do not convert at all!
# convert negative values to zeros as we are only interested on how much cl could increase and we are not saying that current crop production concentrates on wrong areas -- in this article only potential increment are studied
# r_potential_cropland_expansion_ha_perpix <-
#   classify(r_potential_cropland_expansion_ha_perpix , ################# kannattaa miettiä jättäiskö neg arvot kuitenkin tänne -- näyttäis missä kandee vähentää cl
#            rclmat_neg_to_zeros, right = TRUE)
# same as the slower option (5x more time)
# r_potential_cropland_expansion_ha_perpix _positive2 <- r_potential_cropland_expansion_ha_perpix
# r_potential_cropland_expansion_ha_perpix _positive2[r_potential_cropland_expansion_ha_perpix _positive2 < 0] <- NA
# --------------------------------------------------------------- hectares (mask)
# Cropland expansion on cells where there is cropland
r_potential_cropland_expansion_croplandmask_ha_perpix <-
mask(r_potential_cropland_expansion_ha_perpix,
r_physical_areas_crops_sum_ha_perpix)
# Cropland expansion on cells where SPAM crops are not growing
r_potential_cropland_expansion_outside_croplands_ha_perpix  <-
mask(r_potential_cropland_expansion_ha_perpix,
r_physical_areas_crops_sum_ha_perpix, inverse = T)
writeRaster(r_potential_cropland_expansion_ha_perpix, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_ha_perpix.tif"),
overwrite =T)
writeRaster(r_potential_cropland_expansion_croplandmask_ha_perpix, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_croplandmask_ha_perpix.tif"),
overwrite =T)
writeRaster(r_potential_cropland_expansion_outside_croplands_ha_perpix, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_outside_croplands_ha_perpix.tif"),
overwrite =T)
# ----------------------------------------------------- fractions (was ha above)
# Etsi fraction jossa voitais tuottaa lisää. Eli potentiaalinen - nykyinen ala.
# r_SIbased_restricted_max_cropland_fraction_NAto0 vai r_SIbased_restricted_max_cropland_fraction?
r_potential_cropland_expansion_fraction  <-
r_SIbased_restricted_max_cropland_fraction_NAto0 - r_fraction_cl_NAto0 # jos pos voitaisiin tuottaa lisää. Jos neg nyt tuotetaan jo enemmän kuin SI puitteissa ehkä kannattaisi
r_potential_cropland_expansion_fraction <-
mask(r_potential_cropland_expansion_fraction, r_fraction_gl_cl_total_0toNA)
# convert negative to zeros
# note! When SI + + this potential fraction - -
# r_potential_cropland_expansion_fraction <-
#   classify(r_potential_cropland_expansion_fraction,
#            rclmat_neg_to_zeros, right = FALSE) # ---- what if we dont del these yet?
# mask to croplands to illustrate (and to calculage global sums)
r_potential_cropland_expansion_croplandmask_fraction <-
mask(r_potential_cropland_expansion_fraction,
r_physical_areas_crops_sum_ha_perpix)
r_potential_cropland_expansion_outside_croplands_fraction <-
mask(r_potential_cropland_expansion_fraction,
r_physical_areas_crops_sum_ha_perpix, inverse = T)
writeRaster(r_potential_cropland_expansion_fraction, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_fraction.tif"))
writeRaster(r_potential_cropland_expansion_fraction, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_fraction.tif"),
overwrite =T)
writeRaster(r_potential_cropland_expansion_croplandmask_fraction, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_croplandmask_fraction.tif"),
overwrite =T)
writeRaster(r_potential_cropland_expansion_outside_croplands_fraction, filename =
here("Data", "Intermediate_input", "r_potential_cropland_expansion_outside_croplands_fraction.tif"),
overwrite =T)
# ------------------------------------ How much cropland could increase in %?
# Calculate how much more croplands there could be in a cell - express in %
# e.g 100 * (0.45-0.30)/0.30 = 50%
# reads as: In a cell there could be 50% more cropland area compared to current crop production area
# note that r_potential_cropland_expansion_fraction = r_SIbased_restricted_max_cropland_fraction_NAto0 - r_fraction_cl_NAto0
r_cropland_expansion_percent <-
100 * r_potential_cropland_expansion_fraction /
r_fraction_cl_NAto0 # yield Inf valueS when there is no cl
r_cropland_expansion_percent_croplandmask <-
mask(r_cropland_expansion_percent,
r_physical_areas_crops_sum_ha_perpix)
r_cropland_expansion_percent_outside_croplands <-
mask(r_cropland_expansion_percent,
r_physical_areas_crops_sum_ha_perpix, inverse = T)
# r_potential_cropland_expansion_ratio <- r_potential_cropland_expansion_fraction / r_fraction_cl_NAto0
writeRaster(r_cropland_expansion_percent,
filename = here("Data", "Intermediate_input",
"r_cropland_expansion_percent.tif"), overwrite = T)
writeRaster(r_cropland_expansion_percent_croplandmask,
filename = here("Data", "Intermediate_input",
"r_cropland_expansion_percent_croplandmask.tif"), overwrite = T)
writeRaster(r_cropland_expansion_percent_outside_croplands,
filename = here("Data", "Intermediate_input",
"r_cropland_expansion_percent_outside_croplands.tif"), overwrite = T)
# ------------------------------------------------------------------------- plot
# Cropland expansion when areas where SI ≥ %d would be converted from grazing lands to croplands.\nNegative if current cropland area > it should be based on SI "
# !!!! ehkä nimi voisi olla "Changes in cropland areas depending on how..."
(plt_cropland_expansion33 <-
create_dynamic_index_map(myraster = r_cropland_expansion_percent,
layer_num = 33,
main_title = "Cropland expansion depending on how strict we are with land suitability 33",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
(plt_cropland_expansion75 <-
create_dynamic_index_map(myraster = r_cropland_expansion_percent,
layer_num = 75,
main_title = "Cropland expansion depending on how strict we are with land suitability 75",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
# croplandmask -- miksi näyttää että on enemmän alaa kun maskaa croplandmaskin?
(plt_cropland_expansion_croplandmask33 <-
create_dynamic_index_map(myraster = r_cropland_expansion_percent_croplandmask,
layer_num = 33,
main_title = "Cropland expansion depending on how strict we are with land suitability - croplandmask 33",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
(plt_cropland_expansion_outside_croplands33 <-
create_dynamic_index_map(myraster = r_cropland_expansion_percent_outside_croplands,
layer_num = 33,
main_title = "Cropland expansion depending on how strict we are with land suitability - outside croplands 33",
diff_breakvals = c(-Inf, -50, -10, 0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
# Calculate the fraction of grazing land decline by subtracting the current cropland fraction from the maximum allowable cropland fraction (done above)
# r_potential_grazingland_reduction_fraction <- r_potential_cropland_expansion_fraction # only pos vals
#
#
# # Mask the grazing land declines to only areas with grazing land -- why?
#   # global sum of this  is the same with r_potential_cropland_expansion_fraction
#   # also plot is similar - just NA vals is different
# r_potential_grazingland_reduction_fraction_glmask <-
#   mask(r_potential_grazingland_reduction_fraction,
#        r_fraction_gl_0toNA)
#
#
# # plot(r_potential_cropland_expansion_fraction$MaxFracOfCellOvr75) # koko maailma ja meret
# # plot(r_potential_grazingland_reduction_fraction_glmask$MaxFracOfCellOvr75) # vain gl maa-alueet
#
#
#
# # ------------------------------------------------------------------ in hactares
# r_potential_grazingland_reduction_ha_perpix <-
#   r_potential_grazingland_reduction_fraction *
#   cellSize(r_potential_grazingland_reduction_fraction[[1]], unit ="ha")
#
# r_potential_grazingland_reduction_croplandmask_ha_perpix <-
#   mask(r_potential_grazingland_reduction_ha_perpix,
#        r_physical_areas_crops_sum_ha_perpix)
#
# r_potential_grazingland_reduction_outside_croplands_ha_perpix <-
#     mask(r_potential_grazingland_reduction_ha_perpix,
#        r_physical_areas_crops_sum_ha_perpix, inverse = T)
#
# -------------------------------- How much grazing lands could be reduced in %?
# Calculate how much less grazing lands there should be in a cell - express in %
# e.g 100 * (0.45-0.30)/0.40 = 37.5%
# reads as: In a cell there could be 37.5% less gl area compared to current gl area
# note that r_potential_cropland_expansion_fraction = r_SIbased_restricted_max_cropland_fraction_NAto0 - r_fraction_cl_NAto0
r_grazingland_reduction_percent <-
100 *  r_potential_cropland_expansion_fraction/ # which iis the same as r_potential_grazingland_reduction_fraction
r_fraction_gl # no need for NAto0 as then these would be outside gl areas
r_grazingland_reduction_percent_croplandmask <-
mask(r_grazingland_reduction_percent,
r_physical_areas_crops_sum_ha_perpix)
r_grazingland_reduction_percent_outside_croplands <-
mask(r_grazingland_reduction_percent,
r_physical_areas_crops_sum_ha_perpix, inverse = T)
writeRaster(r_grazingland_reduction_percent,
filename = here("Data", "Intermediate_input",
"r_grazingland_reduction_percent.tif"), overwrite = T)
writeRaster(r_grazingland_reduction_percent_croplandmask,
filename = here("Data", "Intermediate_input",
"r_grazingland_reduction_percent_croplandmask.tif"), overwrite = T)
writeRaster(r_grazingland_reduction_percent_outside_croplands,
filename = here("Data", "Intermediate_input",
"r_grazingland_reduction_percent_outside_croplands.tif"), overwrite = T)
# -------------------------------------------------Plot (this is now in figures)
# ex plot -- raster was r_how_many_percent_gl_should_decline_0toNA but then it masks out many important gl areas
(plt_grazingland_reduction33 <-
create_dynamic_index_map(myraster = r_grazingland_reduction_percent,
layer_num = 33,
main_title = "Grazing land reduction depending on how strict we are with land suitability 33",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
# croplandmask -- miksi näyttää että on enemmän alaa kun maskaa croplandmaskin?
(plt_grazingland_reduction75 <-
create_dynamic_index_map(myraster = r_grazingland_reduction_percent,
layer_num = 75,
main_title = "Grazing land reduction depending on how strict we are with land suitability 75",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
(plt_grazingland_reduction_croplandmask33 <-
create_dynamic_index_map(myraster = r_grazingland_reduction_percent_croplandmask,
layer_num = 33,
main_title = "Grazing land reduction depending on how strict we are with land suitability - croplandmask 33",
diff_breakvals = c(-Inf, -50, -10,0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
(plt_grazingland_reduction_outside_croplands33 <-
create_dynamic_index_map(myraster = r_grazingland_reduction_percent_outside_croplands,
layer_num = 33,
main_title = "Grazing land reduction depending on how strict we are with land suitability  - outside croplands 33",
diff_breakvals = c(-Inf, -50, -10, 0, 10, 50, 80, Inf),
diff_breaknames = c("-100 to -50",  "-50 to -10", "-10 to 0", "0 to 10", "10 to 50","50 to 80", "more than 80")))
