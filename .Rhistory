test1[test1 >826.4333] <- NA
r_protein_and_SI_test <- c(test1, SI_5arcmin)
pairs(r_protein_and_SI_test) # 0.16
df_protein_and_SI_test <- as.data.frame(r_protein_and_SI_test, xy = T)
df_protein_and_SI_test <- df_protein_and_SI_test %>%
na.omit()
cor(df_protein_and_SI_test %>%  dplyr::select(-x,-y)) # 0.15
# plot --- no very visible linear trend
ggplot(df_protein_and_SI_test[sample(nrow(df_protein_and_SI_test), 1e4), ],
aes(x = crop_protein_kg_ha , y = overall_suitability_subset1to17)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Scatter Plot",
x = "Crop Protein (kg/ha)",
y = "Overall Suitability") +
theme_minimal()
all_countries <- adm10_simple_faoadded
# create list of countries
country_sf_list <- all_countries %>%
mutate(country_sf_list = map(ADMIN, ~filter(adm10_simple_faoadded, ADMIN == .x))) %>%
pull(country_sf_list)
country_sf_list[[53]] %>% plot() # FI
# find a relevant raster for each country by cropping and masking
country_raster_list <- map(country_sf_list, ~crop_and_mask(r_protein_and_SI, .x))
country_raster_list[[53]] %>% plot() # FI
# Convert to data frame
country_df_list <- map(country_raster_list, ~as.data.frame(.x, xy = T) %>% as_tibble())
country_df_list[[53]] # FI
#  find outliers for every country (list again)
outlier_level_list <- map_dbl(country_df_list, ~quantile(.x$crop_protein_kg_ha, probs = 0.95, na.rm = T)) #95 or 99? Gabriel: test different alternatives. E.g not removing at all, removing bottom and top 1%, bottom and top 5% and bottom and top 10%
outlier_level_list[[53]] # 1243.164 FI
# Filtter so that outliers are removed. Also remove x and y
country_df_filtered_list <- map2(country_df_list, outlier_level_list, ~.x %>%
filter(crop_protein_kg_ha <= .y) %>% # not sure if I should add !is.na(overall_suitability)
dplyr::select(-c(x, y)))
country_df_filtered_list[[53]] # # data for regression
#  test if the distribution is skewed for the right (then gamma distribution could be an option:
# country_df_filtered_list[[57]][,1] %>% pull() %>% hist()
# do regression basd on this filtered data -- use  safe function of purrr to avoind troubles
# Wrapper function for linear regression
fit_lm_possibly <- function(data) {
model_output <- lm(crop_protein_kg_ha ~ overall_suitability , data = data)
# model_coef <- model_output %>%
#   broom::tidy() %>%
#   dplyr::select(term, estimate, p.value)
model_coef <- model_output %>%
broom::tidy() %>%
dplyr::select(term, estimate,  p.value) %>%
pivot_wider(., names_from = term, values_from = c(estimate, p.value))
model_stats <- model_output %>%
broom::glance()
# Combine model_coef and model_stats into a single row data frame
result <- model_coef %>%
mutate(r.squared = model_stats$r.squared, # these from model stats
adj.r.squared = model_stats$adj.r.squared,
AIC = model_stats$AIC,
BIC = model_stats$BIC,
nobs = model_stats$nobs,
sigma = model_stats$sigma,
statistic = model_stats$statistic,
p.value_Ftest = model_stats$p.value) %>%
rename(estimate_intercept = "estimate_(Intercept)")
return(result)
}
# Safe version of the linear regression function
fit_lm_safe <- purrr::possibly(fit_lm_possibly, otherwise = NULL)
model_list <- map(country_df_filtered_list, fit_lm_safe)
model_list[[53]] # results for Finland
# combine nested country_df_filtered_list with polygons
all_countries <- all_countries %>%
mutate(country_df_filtered_list = country_df_filtered_list,
model_list = model_list)
# clean
all_countries_cleaned <- all_countries %>%
dplyr::select(ADMIN, ISO_A3_EH, REGION_UN, geom, model_list)
all_countries_cleaned <- all_countries_cleaned %>%
mutate(model_list = map(model_list, ~ as_tibble(.x))) %>%
unnest(cols = model_list, keep_empty = T)
#View(all_countries_cleaned)
# 1) Find countries where the model is not significant. For these countries, only the distance (distance from a country with a F_testp-value > 0.05 to a significant country) is needed.
model_significant <- all_countries_cleaned %>% filter(p.value_Ftest < 0.05) # 125 countries
model_nonsignificant <- all_countries_cleaned %>% filter(p.value_Ftest >= 0.05 | is.na(p.value_Ftest)) # 77 countries
# Find distances for those 78 countries. First, find centroids (needed for distances)
p_adm0_centroids_st <- all_countries_cleaned %>%
dplyr::select(ADMIN, geom) %>%
st_centroid()
# Filter centroids for countries with significant and non-significant models
significant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_significant$ADMIN) # 124
nonsignificant_centroids <- p_adm0_centroids_st %>%
filter(ADMIN %in% model_nonsignificant$ADMIN) # 78  --------> etäisyydet tarvitaan vain näille (esim Uruguay listalla)
# Calculate distances between non-significant and significant model centroids
distTemp <- st_distance(nonsignificant_centroids, significant_centroids) %>%
as_tibble() # 77 rows because we have 77 nonsignificant_centroids. 125 cols as we have 125 significant countries
# Row = centroid of non-significant countries AND
# Column = centroid of significant countries BETWEEN
# So (1,1) from the centroid of country Dhekelia Sovereign Base Area to the centroid of country Indonesia
# So (1,2) from the centroid of country Dhekelia Sovereign Base Area to the centroid of country Malaysia
#Find the index of the closest significant model for each non-significant model
closest_significant_indices <- apply(distTemp, 1, which.min) # for each row, find the minimum distance, and select the significant column (col) with the shortest distance to the non-significant country (row)
#Attach the closest significant models to the non-significant models.
model_nonsignificant_with_closest <- model_nonsignificant %>%
mutate(closest_significant_model = model_significant$ADMIN[closest_significant_indices],
closest_significant_index = closest_significant_indices)
# Combine the table "significant" with non-significant ones, for which the closest significant country is known.
all_countries_with_replacement <- model_significant %>%
bind_rows(model_nonsignificant_with_closest)
# add intercept and filled suitability
updated_regression_results <- all_countries_with_replacement %>%
mutate(estimate_suitability_filled =
ifelse(p.value_Ftest >= 0.05 | is.na(p.value_Ftest),
model_significant$estimate_overall_suitability[closest_significant_index],
estimate_overall_suitability),
estimate_intercept_filled =
ifelse(p.value_Ftest >= 0.05 | is.na(p.value_Ftest),
model_significant$estimate_intercept[closest_significant_index],
estimate_intercept))
#View(updated_regression_results)
# Original model where non-sig are not filled or replaced
all_countries_cleaned$adj.r.squared %>% summary() # 2 to 6 % median and mean values
model_significant %>%
dplyr::select(adj.r.squared) %>% summary() # 3-9% based on median and mean
r_suitability_filled <-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_suitability_filled")
r_intercept_filled <-
rasterize(updated_regression_results, template_rast_5arcmin, field="estimate_intercept_filled")
plot(SI_5arcmin)
r_predicted_protein_yield_kg_ha <- r_intercept_filled + r_suitability_filled * SI_5arcmin
# create mask. First outside cl mask as this is where we need data
r_predicted_protein_yield_outside_cl_kg_ha <-
mask(r_predicted_protein_yield_kg_ha,
r_physical_areas_crops_sum_ha_perpix, inverse = T)
# moreover gl mask needed (otherwise shows all the possible areas)
r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha <-
mask(r_predicted_protein_yield_outside_cl_kg_ha,
r_fraction_gl_0toNA)
# # one more mask to areas where SI > 0
# SI_5arcmin_test <- SI_5arcmin
# SI_5arcmin_test[SI_5arcmin_test < 1] <- NA
# r_predicted_protein_yield_outside_cl_but_in_gl_areas_and_in_suitable_areas_kg_ha <-
#   mask(r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha, SI_5arcmin_test)
#
# summary(r_predicted_protein_yield_outside_cl_but_in_gl_areas_and_in_suitable_areas_kg_ha)
# summary(r_prot_allcrops_sum_kg_ha)
pal_protein_lajolla <- scico(n = 6, palette = "lajolla", end = 0.85)
(plt_crop_protein_predicted <-
create_index_map(r_index = r_predicted_protein_yield_kg_ha,
#r_predicted_protein_yield_outside_cl_but_in_gl_areas_and_in_suitable_areas_kg_ha,
tocrs = "ESRI:54030",
index_main_title = "Test estimated crop protein yields ", # outside current croplands
index_label = "[kg/ha]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500")))
# Perpix test ---- can run only after suitability.Rmd
# r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test10 <-
#   (r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha/ 1000) *
#   cellSize(r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha, unit = "ha")*
#   r_potential_cropland_expansion_outside_croplands_fraction[[10]]
#
#
# r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test75 <-
#   (r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha/ 1000) *
#   cellSize(r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha, unit = "ha")*
#   r_potential_cropland_expansion_outside_croplands_fraction[[75]]
#
#
# plot(r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test10)
# plot(r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test75)
#
#
# global(r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test10, "sum", na.rm = T)/1e6 # 144 mmt
# global(r_predicted_protein_yield_outside_cl_but_in_gl_areas_mt_perpix_test75, "sum", na.rm = T)/1e6 # 9mmt
r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha
520.1s/60
520.1/60
r_protein_increase_basedOnSI_crops_outside_cl_mt_perpix <-
(r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha/ 1000) *
cellSize(r_predicted_protein_yield_outside_cl_but_in_gl_areas_kg_ha, unit = "ha")*
r_potential_cropland_expansion_outside_croplands_fraction
r_protein_increase_basedOnSI_crops_croplandmask_mt_perpix <-
r_prot_allcrops_sum_kg_ha *
cellSize(r_prot_allcrops_sum_kg_ha, unit = "ha") *
r_potential_cropland_expansion_croplandmask_fraction / # -1 to 1
1000
# convert NA to 0 and combine
r_protein_increase_basedOnSI_crops_mt_perpix <-
classify(r_protein_increase_basedOnSI_crops_croplandmask_mt_perpix, cbind(NA,0)) +
classify(r_protein_increase_basedOnSI_crops_outside_cl_mt_perpix, cbind(NA,0))
# 520.1s
# ------------------------------------ eläinprotskulla (yllä) kaikki ehkä ok
n1 <-
r_protein_increase_basedOnSI_crops_outside_cl_mt_perpix %>%
crop_and_mask(., mada)
plot(ni[[10]])
plot(n1[[10]])
plot(n1[[97]])
n2 <-
r_protein_increase_basedOnSI_crops_croplandmask_mt_perpix %>%
crop_and_mask(., mada)
n3 <-
r_protein_increase_basedOnSI_crops_mt_perpix %>%
crop_and_mask(., mada)
plot(n2[[10]])
plot(n2[[97]])
summary(n2[[97]])
summary(n3[[97]])
plot(n3[[97]])
r_optimised_protein_crops_mt_perpix
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[95]], ## !!! outoa
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
r_optimised_protein_crops_mt_perpix_mada[[95]]
create_index_map(r_index = 1000*r_optimised_protein_crops_mt_perpix_mada[[95]], ## !!! outoa
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
r_optimised_protein_crops_mt_perpix_mada[[95]]
r_optimised_protein_crops_mt_perpix_mada[[95]] %>% summary()
1000*r_optimised_protein_crops_mt_perpix_mada[[95]] %>% summary()
kok <- 1000*r_optimised_protein_crops_mt_perpix_mada
summary(kok)
plot(kok)
plot(kok[[10]])
create_index_map(r_index = 1000*r_optimised_protein_crops_mt_perpix_mada[[95]], ## !!! outoa
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
r_optimised_protein_crops_mt_perpix_mada[[95]]
create_index_map(r_index = r_optimised_protein_crops_kg_ha_mada[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
qtm(r_optimised_protein_crops_kg_ha_mada[[95]])
plot(r_optimised_protein_crops_kg_ha_mada[[95]])
(r_optimised_protein_crops_kg_ha_mada[[95]])
plot(r_optimised_protein_crops_kg_ha_mada[[95]])
r_optimised_protein_crops_kg_ha_mada[[95]]
kok <- r_optimised_protein_crops_kg_ha_mada
kok[kok > 500000] <- 500000
kok
plot(kok[[95]])
create_index_map(r_index = r_optimised_protein_crops_kg_ha_mada[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
r_optimised_protein_crops_kg_ha_mada[[95]]
r_prot_allcrops_sum_kg_ha
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = 1000*r_optimised_protein_crops_mt_perpix_mada[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
create_index_map(r_index = 1000*r_prot_allcrops_sum_mt_perpix[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
create_index_map(r_index = 1000*r_prot_allcrops_sum_mt_perpix,
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
create_index_map(r_index = r_prot_allcrops_sum_mt_perpix,
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = *r_optimised_protein_crops_mt_perpix_mada[[95]],
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
create_index_map(r_index = crop_and_mask(r_prot_allcrops_sum_mt_perpix, mada), # näkyy suht järkevästi
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[5]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[80]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[99]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
r_optimised_protein_crops_mt_perpix_mada[[99]]
create_index_map(r_index = crop_and_mask(r_prot_allcrops_sum_mt_perpix, mada), # näkyy suht järkevästi
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
create_index_map(r_index = crop_and_mask(r_prot_allcrops_sum_mt_perpix, mada), # näkyy suht järkevästi
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[mt perpix]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
#r_optimised_protein_crops_mt_perpix_mada ## PERPIX
create_index_map(r_index = r_optimised_protein_crops_mt_perpix_mada[[99]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[mt perpix]", # ok -- ei juuri proteiinia kun SI > 99
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
summary(r_SIbased_restricted_max_cropland_fraction_NAto0_mada)
summary(r_optimised_protein_crops_mt_perpix_mada)
# on Inf kun fractio lähestyy nollaa
r_optimised_protein_crops_kg_ha_mada_Infto0 <-
classify(r_optimised_protein_crops_kg_ha_mada, cbind(Inf, 0))
create_index_map(r_index = r_optimised_protein_crops_kg_ha_mada_Infto0[[95]],
tocrs = "ESRI:54030",
index_main_title = "",
index_label = "[kg]", # Inf arvot jäävät näkyviin -- pitäisikö niiden olla 0?
colorpal = pal_protein_lajolla,
breakvals = c(0, 10, 50, 100, 250, 500, Inf),
breaknames = c("0-10","10-50", "50-100",
"100-250","250-500",  ">500"))
LO_i_current_NAto0
HDP_i_SI_based
HDP_animal_prot_i_current
LUR_SI_based_NAto0
r_SIbased_restricted_max_cropland_fraction
plot(r_SIbased_restricted_max_cropland_fraction[[2]])
plot(r_SIbased_restricted_max_cropland_fraction[[98]])
plot(r_SIbased_restricted_max_cropland_fraction[[5]])
plot(r_SIbased_restricted_max_cropland_fraction_NAto0[[5]])
# Convert negative values and Inf values to zeros
rclmat_neg_inf_to_zeros <- matrix(c(-Inf, 0, 0, Inf, 0, 0), ncol = 3, byrow = TRUE)
rclmat_neg_inf_to_zeros
# -------------------------------------------------------------- numerator
# LO = land area needed to produce 1 kg of animal protein
# = the same as with current production. Amount of AGB is the same regardless of out optimisation. Moreover, protein production capacity depends only on AGB and FCR of given cell. Therefore, LO is not affected by optimisation
LO_i_current_NAto0
# ----------------------------------------------------------------------- HDP
# HDP = human-digestible protein that could be produced from the same area with direct cultivation of food crops
# (e.g., 200 kg of protein per hectare). This is calculated using crop protein yields (in different SI classes) multiplied by their digestibility
r_optimised_protein_crops_mt_perpix <-
here("Data", "Intermediate_input", "r_optimised_protein_crops_mt_perpix.tif") %>%
rast()
# Convert to kg per ha -->
r_optimised_protein_crops_kg_ha <-
(r_optimised_protein_crops_mt_perpix * 1000) /
(cellSize(r_optimised_protein_crops_mt_perpix[[1]], unit = "ha") *
r_SIbased_restricted_max_cropland_fraction)
# convert negative values to zeros
rclmat_neg_to_zeros <- matrix(c(-Inf, 0, 0), ncol = 3, byrow = TRUE)
r_optimised_protein_crops_kg_ha <-
classify(r_optimised_protein_crops_kg_ha,
rclmat_neg_to_zeros, right = FALSE) # Ifn and NaN values -- remove those
# convert Inf values to zeros (Inf values if r_SIbased_restricted_max_cropland_fraction_NAto0 = 0)
r_optimised_protein_crops_kg_ha <- classify(r_optimised_protein_crops_kg_ha, cbind(Inf, 0))
HDP_i_SI_based <- r_optimised_protein_crops_kg_ha * 0.85
# ----------------------------------------------------------------- denominator
# should be different for different cells -- check fbs_animals_wide_filled$protein_fraction %>% hist()
HDP_animal_prot_i_current
# ---------------------------------------------------------------------- LUR
LUR_SI_based <-
(LO_i_current_NAto0 * HDP_i_SI_based) /
HDP_animal_prot_i_current
# now croplands are NA if SI increases. Those NA cells in agricultural land areas should get value 0 as LUR = 0 if crops cannot be produced
LUR_SI_based_NAto0 <- classify(LUR_SI_based, cbind(NA,0))
# mask to procution areas
LUR_SI_based_NAto0 <-
mask(LUR_SI_based_NAto0, r_fraction_gl_cl_total_0toNA)
# maybe use bam?
# pal_test_bam <- scico(n =11, palette = "bam", inverse = T)
# pal_test_bam <- pal_test_bam[c(3,7,11)] # this to get light red, light and dark green values
(plt_LUR10 <-
create_index_map(r_index = LUR_SI_based_NAto0[[10]],
tocrs = "ESRI:54030",
index_main_title = "LUR when SI>10 areas could be converted to croplands",
index_label = "[LUR]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 1, 10, 100, 250, 5000, Inf),
breaknames = c("0-1","1-10","10-100",
"100-250","250-5000",  ">5000")))
(plt_LUR33 <-
create_index_map(r_index = LUR_SI_based_NAto0[[33]],
tocrs = "ESRI:54030",
index_main_title = "LUR when SI>33 areas could be converted to croplands",
index_label = "[LUR]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 1, 10, 100, 250, 5000, Inf),
breaknames = c("0-1","1-10","10-100",
"100-250","250-5000",  ">5000")))
(plt_LUR75 <-
create_index_map(r_index = LUR_SI_based_NAto0[[75]],
tocrs = "ESRI:54030",
index_main_title = "LUR when SI>75 areas could be converted to croplands",
index_label = "[LUR]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 1, 10, 100, 250, 5000, Inf),
breaknames = c("0-1","1-10","10-100",
"100-250","250-5000",  ">5000")))
(plt_LUR98 <-
create_index_map(r_index = LUR_SI_based_NAto0[[98]],
tocrs = "ESRI:54030",
index_main_title = "LUR when SI>98 areas could be converted to croplands",
index_label = "[LUR]",
colorpal = pal_protein_lajolla,
breakvals = c(0, 1, 10, 100, 250, 5000, Inf),
breaknames = c("0-1","1-10","10-100",
"100-250","250-5000",  ">5000")))
plts_lur <-
tmap_arrange(plt_LUR10, plt_LUR33, plt_LUR75, plt_LUR98, ncol = 2)
plts_lur
tmap_save(plts_lur, filename = here("Figures", "LUR_test_digest.pdf"))
# testaa animaatiota
# Luodaan lista tmap-objekteista
# tm_list <- lapply(1:nlayers(LUR_NAto0), function(i) {
#   tm_shape(LUR_NAto0[[i]]) +
#     tm_raster(title = paste("Layer", i))
# })
# tmap_animation(tm_list, width = 180, height = 150, filename = "LUR_animation.gif")
# # Luodaan animaatio
# tmap_animation(tm_list, filename = "animation.gif")
#
#
# plts_lur_list <-
#   lapply(1:nlyr(LUR_NAto0), function(i) {
#     create_index_map(r_index = LUR_NAto0[[i]],
#                    tocrs = "ESRI:54030",
#                    index_main_title = paste("Layer", i),
#                    index_label = "[LUR]",
#                    colorpal = pal_protein_lajolla,
#                    breakvals = c(0, 1, 10, 100, 250, 5000, Inf),
#                    breaknames = c("0-1","1-10","10-100",
#                                   "100-250","250-5000",  ">5000"))
#
# })
#
#
# tmap_animation(plts_lur_list, width = 1200, height = 1000, delay = 20,dpi = 300,
#                filename = here("Figures", "LUR_animation2.gif"))
LUR_SI_based_NAto0
writeRaster(LUR_SI_based_NAto0,
here("Data", "Intermediate_imput", "LUR_SI_based_NAto0.tif"),
overwrite = T)
writeRaster(LUR_SI_based_NAto0,
here("Data", "Intermediate_input", "LUR_SI_based_NAto0.tif"),
overwrite = T)
